{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACljpzpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjmzgtfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ucgrapes/./src/classes/Clock.js","webpack://ucgrapes/./src/classes/DataManager.js","webpack://ucgrapes/./src/classes/EditorManager.js","webpack://ucgrapes/./src/classes/EventListenerManager.js","webpack://ucgrapes/./src/classes/Locale.js","webpack://ucgrapes/./src/classes/PageManager.js","webpack://ucgrapes/./src/classes/PopupManager.js","webpack://ucgrapes/./src/classes/TemplateManager.js","webpack://ucgrapes/./src/classes/ThemeManager.js","webpack://ucgrapes/./src/classes/ToolBoxUI.js","webpack://ucgrapes/./src/classes/ToolboxManager.js","webpack://ucgrapes/./src/components/ActionListComponent.js","webpack://ucgrapes/./src/components/MappingComponent.js","webpack://ucgrapes/./src/utils/defaults.js","webpack://ucgrapes/webpack/bootstrap","webpack://ucgrapes/./src/script.js"],"sourcesContent":["class Clock {\n    constructor(pageId) {\n      this.pageId = pageId;\n      this.updateTime();\n    }\n  \n    updateTime() {\n      const now = new Date();\n      let hours = now.getHours();\n      const minutes = now.getMinutes().toString().padStart(2, \"0\");\n      const ampm = hours >= 12 ? \"PM\" : \"AM\";\n      hours = hours % 12;\n      hours = hours ? hours : 12; // Adjust hours for 12-hour format\n      const timeString = `${hours}:${minutes} ${ampm}`;\n      document.getElementById(this.pageId).textContent = timeString;\n    }\n  }\n  \nmodule.exports = Clock","const environment = \"/Comforta_version2DevelopmentNETPostgreSQL\";\nconst baseURL = window.location.origin + (window.location.origin.startsWith(\"http://localhost\") ? environment : \"\");\n\nclass DataManager {\n  constructor(services = [], media = []) {\n    this.services = services;\n    this.media = media;\n    this.pages = [];\n    this.selectedTheme = null;\n    \n  }\n\n  // Helper method to handle API calls\n  async fetchAPI(endpoint, options = {}) {\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const response = await fetch(`${baseURL}${endpoint}`, {\n        ...defaultOptions,\n        ...options,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  // Pages API methods\n  async getPages() {\n    this.pages = await this.fetchAPI('/api/toolbox/pages/list');\n    return this.pages;\n  }\n\n  async getSinglePage(pageId) {\n    return await this.fetchAPI(`/api/toolbox/singlepage?Pageid=${pageId}`);\n  }\n\n  async deletePage(pageId) {\n    return await this.fetchAPI(`/api/toolbox/deletepage?Pageid=${pageId}`);\n  }\n\n  async getPagesService() {\n    return await this.fetchAPI('/api/toolbox/pages/tree');\n  }\n\n  async createNewPage(pageName, theme) {\n    let pageJsonContent = generateNewPage(theme)\n    return await this.fetchAPI('/api/toolbox/create-page', {\n      method: 'POST',\n      body: JSON.stringify({ PageName: pageName, PageJsonContent: JSON.stringify(pageJsonContent) }),\n    });\n  }\n\n  async updatePage(data) {\n    return await this.fetchAPI('/api/toolbox/update-page', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async updatePagesBatch(payload) {\n    return await this.fetchAPI('/api/toolbox/update-pages-batch', {\n      method: 'POST',\n      body: JSON.stringify(payload),\n    });\n  }\n\n  async addPageChild(childPageId, currentPageId) {\n    return await this.fetchAPI('/api/toolbox/add-page-children', {\n      method: 'POST',\n      body: JSON.stringify({\n        ParentPageId: currentPageId,\n        ChildPageId: childPageId,\n      }),\n    });\n  }\n\n  async createContentPage(pageId) {\n    console.log('createContentPage', pageId);\n    return await this.fetchAPI('/api/toolbox/create-content-page', {\n      method: 'POST',\n      body: JSON.stringify({ PageId: pageId }),\n    });\n  }\n\n  // Theme API methods\n  async getLocationTheme() {\n    return await this.fetchAPI('/api/toolbox/location-theme');\n  }\n\n  async updateLocationTheme() {\n    if (!this.selectedTheme?.id) {\n      throw new Error('No theme selected');\n    }\n\n    return await this.fetchAPI('/api/toolbox/update-location-theme', {\n      method: 'POST',\n      body: JSON.stringify({ ThemeId: this.selectedTheme.id }),\n    });\n  }\n\n  // Media API methods\n  async getMediaFiles() {\n    return await this.fetchAPI('/api/media/');\n  }\n\n  async deleteMedia(mediaId) {\n    return await this.fetchAPI(`/api/media/delete?MediaId=${mediaId}`);\n  }\n\n  async uploadFile(fileData, fileName, fileSize, fileType) {\n    if (!fileData) {\n      throw new Error('Please select a file!');\n    }\n\n    return await this.fetchAPI('/api/media/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      body: JSON.stringify({\n        MediaName: fileName,\n        MediaImageData: fileData,\n        MediaSize: fileSize,\n        MediaType: fileType,\n      }),\n    });\n  }\n\n  // Content API methods\n  async getContentPageData(productServiceId) {\n    return await this.fetchAPI(`/api/productservice?Productserviceid=${productServiceId}`);\n  }\n}\n\nmodule.exports = DataManager\n","class EditorManager {\n  editors = {};\n  pages = [];\n  theme = [];\n  currentEditor = null;\n  currentPageId = null;\n  selectedTemplateWrapper = null;\n  selectedComponent = null;\n  container = document.getElementById(\"child-container\");\n\n  constructor(dataManager, currentLanguage) {\n    this.dataManager = dataManager;\n    this.currentLanguage = currentLanguage;\n    this.templateManager = new TemplateManager(this.currentLanguage, this);\n    this.editorEventManager = new EditorEventManager(\n      this,\n      this.templateManager\n    );\n\n    this.initializeEditorManager();\n  }\n\n  async initializeEditorManager() {\n    const theme = await this.dataManager.getLocationTheme();\n    if (this.toolsSection.checkIfNotAuthenticated(theme)) return;\n    this.theme = theme.SDT_LocationTheme;\n\n    const pagesResponse = await this.dataManager.getPages();\n    if (this.toolsSection.checkIfNotAuthenticated(pagesResponse)) return;\n\n    this.pages = pagesResponse.SDT_PageCollection;\n    this.initializeHomePage();\n  }\n\n  initializeHomePage() {\n    const homePage = this.pages.find((page) => page.PageName == \"Home\");\n    if (homePage) {\n      this.createChildEditor(homePage);\n      this.currentPageId = homePage.PageId;\n    } else {\n      this.toolsSection.ui.displayAlertMessage(\n        `${this.currentLanguage.getTranslation(\"no_home_page_found\")}`,\n        \"danger\"\n      );\n    }\n  }\n\n  getCurrentEditor() {\n    return this.currentEditor.editor;\n  }\n\n  setCurrentEditor(editorId) {\n    const previousEditor = this.editors[this.currentEditor];\n    if (previousEditor) previousEditor.select(null);\n    this.currentEditor = this.editors[editorId];\n    this.activateFrame(editorId + \"-frame\");\n    this.toolsSection.unDoReDo(this.currentEditor.editor);\n  }\n\n  activateFrame(activeFrameClass) {\n    const activeFrame = document.querySelector(activeFrameClass);\n    document.querySelectorAll(\".active-editor\").forEach((frame) => {\n      if (frame !== activeFrame) {\n        frame.classList.remove(\"active-editor\");\n      }\n    });\n    activeFrame.classList.add(\"active-editor\");\n  }\n\n  createChildEditor(page) {\n    const editorDetails = this.setupEditorContainer(page);\n    const editor = this.initializeGrapesEditor(editorDetails.editorId);\n    this.editorEventManager.addEditorEventListeners(editor, page);\n    this.loadEditorContent(editor, page);\n    this.setupEditorLayout(editor, page, editorDetails.containerId);\n    this.finalizeEditorSetup(editor, page, editorDetails);\n  }\n\n\n  setupEditorContainer(page) {\n    const count = this.container.children.length;\n    const editorId = `gjs-${count}`;\n    const containerId = `${editorId}-frame`;\n\n    const editorContainer = document.createElement(\"div\");\n    editorContainer.innerHTML = this.generateEditorHTML(page, editorId);\n    this.configureEditorContainer(editorContainer, containerId, page.PageId);\n\n    return { editorId, containerId };\n  }\n\n  generateEditorHTML(page, editorId) {\n    const appBar = this.shouldShowAppBar(page)\n      ? this.createAppBarHTML(page.PageName)\n      : \"\";\n\n    return `\n      <div class=\"header\">\n          <span id=\"current-time-${page.PageId}\"></span>\n          <span class=\"icons\">\n              <i class=\"fas fa-signal\"></i>\n              <i class=\"fas fa-wifi\"></i>\n              <i class=\"fas fa-battery\"></i>\n          </span>\n      </div>\n      ${appBar}\n      <div id=\"${editorId}\"></div>\n    `;\n  }\n\n  configureEditorContainer(container, containerId, pageId) {\n    container.id = containerId;\n    container.dataset.pageid = pageId;\n    container.classList.add(\"mobile-frame\", \"adding\");\n    this.container.appendChild(container);\n\n    requestAnimationFrame(() => {\n      container.classList.remove(\"adding\");\n    });\n  }\n\n  shouldShowAppBar(page) {\n    return (\n      page.PageIsContentPage ||\n      (page.PageIsPredefined && page.PageName !== \"Home\")\n    );\n  }\n\n  createAppBarHTML(pageName) {\n    return `\n      <div class=\"app-bar\">\n          <button id=\"content-back-button\" class=\"back-button\">\n              <svg class=\"back-arrow\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M19 12H5M5 12L12 19M5 12L12 5\"/>\n                  <path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19 12H5M5 12L12 19M5 12L12 5\"/>\n              </svg>\n          </button>\n          <h1 class=\"title\" style=\"text-transform: uppercase\">${pageName}</h1>\n      </div>\n    `;\n  }\n\n  initializeGrapesEditor(editorId) {\n    return grapesjs.init({\n      container: `#${editorId}`,\n      fromElement: true,\n      height: \"100%\",\n      width: \"auto\",\n      canvas: {\n        styles: [\n          \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\",\n          \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\",\n          \"https://fonts.googleapis.com/css2?family=Lora&family=Merriweather&family=Poppins:wght@400;500&family=Roboto:wght@400;500&display=swap\",\n          \"/Resources/UCGrapes1/src/css/toolbox.css\",\n        ],\n      },\n      baseCss: \" \",\n      dragMode: \"normal\",\n      panels: { defaults: [] },\n      sidebarManager: false,\n      storageManager: false,\n      modal: false,\n      commands: false,\n      hoverable: false,\n      highlightable: false,\n      selectable: false,\n    });\n  }\n\n  updatePageJSONContent(editor, page){\n    const PageGJSJson = editor.getProjectData()\n    this.dataManager.pages.SDT_PageCollection.map(p=>{\n      if (p.PageId == page.PageId) {\n        p.PageGJSJson = JSON.stringify(PageGJSJson)\n      }\n      return p\n    })\n  }\n\n  async loadEditorContent(editor, page) {\n    if (page.PageGJSJson) {\n      await this.loadExistingContent(editor, page);\n    } else if (page.PageIsContentPage) {\n      await this.loadNewContentPage(editor, page);\n    }\n    this.updatePageJSONContent(editor, page)\n  }\n\n  async loadExistingContent(editor, page) {\n    try {\n      const pageData = JSON.parse(page.PageGJSJson);\n\n      if (page.PageIsPredefined && page.PageName === \"Location\") {\n        await this.handleLocationPage(editor, pageData);\n      }\n      else if (page.PageIsPredefined && page.PageName === \"Reception\") {\n        editor.loadProjectData(pageData);\n      } else if (page.PageIsContentPage) {\n        editor.loadProjectData(pageData);\n        await this.handleContentPage(editor, page);\n      } else {\n        editor.loadProjectData(pageData);\n      }\n    } catch (error) {\n      console.error(\"Error loading existing content:\", error);\n    }\n  }\n\n  async handleLocationPage(editor, pageData) {\n    pageData.pages[0].frames[0].component.components[0].components[0].components[0].components[0].components[0].components[0].attributes.src =\n      this.dataManager.Location.LocationImage_GXI;\n    pageData.pages[0].frames[0].component.components[0].components[0].components[0].components[0].components[0].components[1].components[0].content =\n      this.dataManager.Location.LocationDescription;\n    editor.DomComponents.clear();\n    editor.loadProjectData(pageData);\n  }\n\n  async handleContentPage(editor, page) {\n    try {\n      const res = await this.dataManager.getContentPageData(page.PageId);\n      if (this.toolsSection.checkIfNotAuthenticated(res)) return;\n\n      const contentPageData = res.SDT_ProductService;\n      if (!contentPageData) {\n        console.warn(\"No content page data received\");\n        return;\n      }\n\n      await this.updateContentPageElements(editor, contentPageData);\n    } catch (error) {\n      console.error(\"Error loading content page data:\", error);\n    }\n  }\n\n  async updateContentPageElements(editor, contentPageData) {\n    const wrapper = editor.DomComponents.getWrapper();\n    if (!wrapper) {\n      console.error(\"Wrapper not found in editor\");\n      return;\n    }\n\n    await this.updateImage(wrapper, contentPageData);\n    await this.updateDescription(wrapper, contentPageData);\n    this.toolsSection.ui.pageContentCtas(contentPageData.CallToActions, editor);\n  }\n\n  async updateImage(wrapper, contentPageData) {\n    const img = wrapper.find(\"#product-service-image\");\n    if (img.length > 0) {\n      if (!contentPageData?.ProductServiceImage) {\n        img[0].remove();\n      } else {\n        try {\n          img[0].setAttributes({\n            src: contentPageData.ProductServiceImage,\n            alt: \"Product Service Image\",\n          });\n        } catch (err) {\n          console.error(\"Error updating image:\", err);\n        }\n      }\n    }\n  }\n\n  async updateDescription(wrapper, contentPageData) {\n    const p = wrapper.find(\"#product-service-description\");\n    if (p.length > 0) {\n      if (!contentPageData?.ProductServiceDescription) {\n        p[0].remove();\n      } else {\n        try {\n          p[0].components(contentPageData.ProductServiceDescription);\n        } catch (err) {\n          console.error(\"Error updating description:\", err);\n        }\n      }\n    }\n  }\n\n  async loadNewContentPage(editor, page) {\n    try {\n      const res = await this.dataManager.getContentPageData(page.PageId);\n      if (this.toolsSection.checkIfNotAuthenticated(res)) return;\n\n      const contentPageData = res.SDT_ProductService;\n      if (contentPageData) {\n        const projectData =\n          this.templateManager.initialContentPageTemplate(contentPageData);\n        editor.addComponents(projectData)[0];\n        this.toolsSection.ui.pageContentCtas(\n          contentPageData.CallToActions,\n          editor\n        );\n      }\n    } catch (error) {\n      console.error(\"Error fetching content page data:\", error);\n    }\n  }\n\n  setupEditorLayout(editor, page, containerId) {\n    if (this.shouldShowAppBar(page)) {\n      const canvas = editor.Canvas.getElement();\n      if (canvas) {\n        canvas.style.setProperty(\"height\", \"calc(100% - 100px)\", \"important\");\n      }\n      this.backButtonAction(containerId);\n    }\n  }\n\n  finalizeEditorSetup(editor, page, editorDetails) {\n    const editorData = {\n      pageId: page.PageId,\n      editor,\n    };\n    this.editors[`#${editorDetails.editorId}`] = editorData;\n\n    if (page.PageName === \"Home\") {\n      this.setCurrentEditor(`#${editorDetails.editorId}`);\n    }\n\n    const wrapper = editor.getWrapper();\n    wrapper.set({\n      selectable: false,\n      droppable: false,\n      draggable: false,\n      hoverable: false,\n    });\n\n    const navigator = this.editorEventManager.activateNavigators();\n    navigator.updateButtonVisibility();\n    navigator.scrollBy(200);\n    new Clock(`current-time-${page.PageId}`);\n  }\n\n  getPage(pageId) {\n    return this.dataManager.pages.SDT_PageCollection.find(\n      (page) => page.PageId == pageId\n    );\n  }\n\n  backButtonAction(editorContainerId) {\n    const backButton = document.getElementById(\"content-back-button\");\n    if (backButton) {\n      backButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        $(\"#\" + editorContainerId).remove();\n        this.editorEventManager.activateNavigators();\n      });\n    }\n  }\n\n  setToolsSection(toolBox) {\n    this.toolsSection = toolBox;\n  }\n}\n\nmodule.exports = EditorManager\n","class EventListenerManager {\n    constructor(toolBoxManager) {\n      this.toolBoxManager = toolBoxManager;\n    }\n  \n    setupTabListeners() {\n      const tabButtons = document.querySelectorAll(\".tb-tab-button\");\n      const tabContents = document.querySelectorAll(\".tb-tab-content\");\n      tabButtons.forEach((button) => {\n        button.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          tabButtons.forEach((btn) => btn.classList.remove(\"active\"));\n          tabContents.forEach((content) => (content.style.display = \"none\"));\n  \n          button.classList.add(\"active\");\n          document.querySelector(`#${button.dataset.tab}-content`).style.display =\n            \"block\";\n        });\n      });\n    }\n  \n    setupMappingListeners() {\n      const mappingButton = document.getElementById(\"open-mapping\");\n      const publishButton = document.getElementById(\"publish\");\n      const mappingSection = document.getElementById(\"mapping-section\");\n      const toolsSection = document.getElementById(\"tools-section\");\n  \n      this.toolBoxManager.mappingComponent = new MappingComponent(\n        this.toolBoxManager.dataManager,\n        this.toolBoxManager.editorManager,\n        this.toolBoxManager,\n        this.toolBoxManager.currentLanguage\n      );\n  \n      mappingButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n  \n        toolsSection.style.display =\n          toolsSection.style.display === \"none\" ? \"block\" : \"none\";\n  \n        mappingSection.style.display =\n          mappingSection.style.display === \"block\" ? \"none\" : \"block\";\n  \n        this.toolBoxManager.mappingComponent.init();\n      });\n    }\n  \n    setupPublishListeners() {\n      const publishButton = document.getElementById(\"publish\");\n  \n      publishButton.onclick = (e) => {\n        e.preventDefault();\n        const popup = document.createElement(\"div\");\n        popup.className = \"popup-modal\";\n        popup.innerHTML = `\n                <div class=\"popup\">\n                  <div class=\"popup-header\">\n                    <span>${this.toolBoxManager.currentLanguage.getTranslation(\n                      \"publish_confirm_title\"\n                    )}</span>\n                    <button class=\"close\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 21 21\">\n                          <path id=\"Icon_material-close\" data-name=\"Icon material-close\" d=\"M28.5,9.615,26.385,7.5,18,15.885,9.615,7.5,7.5,9.615,15.885,18,7.5,26.385,9.615,28.5,18,20.115,26.385,28.5,28.5,26.385,20.115,18Z\" transform=\"translate(-7.5 -7.5)\" fill=\"#6a747f\" opacity=\"0.54\"/>\n                      </svg>\n                    </button>\n                  </div>\n                  <hr>\n                  <div class=\"popup-body\" id=\"confirmation_modal_message\">\n                  ${this.toolBoxManager.currentLanguage.getTranslation(\n                    \"publish_confirm_message\"\n                  )}\n                    <label for=\"notify_residents\" class=\"notify_residents\">\n                        <input type=\"checkbox\" id=\"notify_residents\" name=\"notify_residents\">\n                        <span>${this.toolBoxManager.currentLanguage.getTranslation(\n                          \"nofity_residents_on_publish\"\n                        )}</span>\n                    </label>\n                  </div>\n                  <div class=\"popup-footer\">\n                    <button id=\"yes_publish\" class=\"tb-btn tb-btn-primary\">\n                    ${this.toolBoxManager.currentLanguage.getTranslation(\n                      \"publish_confirm_button\"\n                    )}\n                    </button>\n                    <button id=\"close_popup\" class=\"tb-btn tb-btn-outline\">\n                    ${this.toolBoxManager.currentLanguage.getTranslation(\n                      \"publish_cancel_button\"\n                    )}\n                    </button>\n                  </div>\n                </div>\n              `;\n  \n        document.body.appendChild(popup);\n        popup.style.display = \"flex\";\n  \n        const publishButton = popup.querySelector(\"#yes_publish\");\n        const closeButton = popup.querySelector(\"#close_popup\");\n        const closePopup = popup.querySelector(\".close\");\n  \n        publishButton.addEventListener(\"click\", () => {\n          const isNotifyResidents =\n            document.getElementById(\"notify_residents\").checked;\n          this.toolBoxManager.publishPages(isNotifyResidents);\n          popup.remove();\n        });\n  \n        closeButton.addEventListener(\"click\", () => {\n          popup.remove();\n        });\n  \n        closePopup.addEventListener(\"click\", () => {\n          popup.remove();\n        });\n      };\n    }\n  \n    setupAlignmentListeners() {\n      const leftAlign = document.getElementById(\"text-align-left\");\n      const centerAlign = document.getElementById(\"text-align-center\");\n      const rightAlign = document.getElementById(\"text-align-right\");\n  \n      leftAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-title-section\"\n            )[0];\n  \n          if (templateBlock) {\n            templateBlock.setStyle({\n              // display: \"flex\",\n              // \"align-self\": \"start\",\n              \"text-align\": \"left\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\"tile-text-align\", \"left\");\n          }\n        }\n      });\n  \n      centerAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-title-section\"\n            )[0];\n  \n          if (templateBlock) {\n            templateBlock.setStyle({\n              // display: \"flex\",\n              // \"align-self\": \"center\",\n              \"text-align\": \"center\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-text-align\",\n              \"center\"\n            );\n          }\n        }\n      });\n  \n      rightAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-title-section\"\n            )[0];\n  \n          if (templateBlock) {\n            templateBlock.setStyle({\n              // display: \"flex\",\n              // \"align-self\": \"end\",\n              \"text-align\": \"right\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-text-align\",\n              \"right\"\n            );\n          }\n        }\n      });\n  \n      const iconLeftAlign = document.getElementById(\"icon-align-left\");\n      const iconCenterAlign = document.getElementById(\"icon-align-center\");\n      const iconRightAlign = document.getElementById(\"icon-align-right\");\n  \n      iconLeftAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-icon-section\"\n            )[0];\n          if (templateBlock) {\n            templateBlock.setStyle({\n              display: \"flex\",\n              \"align-self\": \"start\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\"tile-icon-align\", \"left\");\n          }\n        }\n      });\n  \n      iconCenterAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-icon-section\"\n            )[0];\n  \n          if (templateBlock) {\n            templateBlock.setStyle({\n              display: \"flex\",\n              \"align-self\": \"center\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-icon-align\",\n              \"center\"\n            );\n          }\n        }\n      });\n  \n      iconRightAlign.addEventListener(\"click\", () => {\n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent.find(\n              \".tile-icon-section\"\n            )[0];\n  \n          if (templateBlock) {\n            templateBlock.setStyle({\n              display: \"flex\",\n              \"align-self\": \"end\",\n            });\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-icon-align\",\n              \"right\"\n            );\n          }\n        } \n      });\n    }\n  \n    setupOpacityListener() {\n      const imageOpacity = document.getElementById(\"bg-opacity\");\n  \n      imageOpacity.addEventListener(\"input\", (event) => {\n        const value = event.target.value;\n  \n        if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n          const templateBlock =\n            this.toolBoxManager.editorManager.selectedComponent;\n  \n          if (templateBlock) {\n            const opacity = value / 100;\n            const currentBgImage = templateBlock\n              .getStyle()\n              [\"background-image\"].match(/url\\((.*?)\\)/)[1];\n            templateBlock.addStyle({\n              \"background-image\": `linear-gradient(rgba(255, 255, 255, ${\n                1 - value / 100\n              }), rgba(255, 255, 255, ${\n                1 - value / 100\n              })), url(${currentBgImage})`,\n            });\n          }\n        }\n      });\n    }\n  \n    setupAutoSave() {\n      setInterval(() => {\n        const editors = Object.values(this.toolBoxManager.editorManager.editors);\n  \n        if (!this.toolBoxManager.previousStates) {\n          this.toolBoxManager.previousStates = new Map();\n        }\n        if (editors && editors.length) {\n          for (let index = 0; index < editors.length; index++) {\n            const editorData = editors[index];\n            const editor = editorData.editor;\n            const pageId = editorData.pageId;\n  \n            if (!this.toolBoxManager.previousStates.has(pageId)) {\n              this.toolBoxManager.previousStates.set(pageId, editor.getHtml());\n            }\n  \n            const currentState = editor.getHtml();\n  \n            if (currentState !== this.toolBoxManager.previousStates.get(pageId)) {\n              this.toolBoxManager.autoSavePage(editorData);\n  \n              this.toolBoxManager.previousStates.set(pageId, currentState);\n            }\n          }\n        }\n      }, 10000);\n    }\n  }\n\nmodule.exports = EventListenerManager","class Locale {\n  constructor(language) {\n    this.currentLanguage = language;\n    this.defaultLanguage = \"english\";\n    this.translations = {};\n  }\n\n  async init() {\n    await this.loadTranslations();\n    return this; // Allow chaining\n  }\n\n  async loadTranslations() {\n    try {\n      const languages = [\"english\", \"dutch\"];\n      for (const lang of languages) {\n        const response = await fetch(\n          `${window.location.origin}/Resources/UCGrapes1/src/i18n/${lang}.json`\n        );\n        if (!response.ok)\n          throw new Error(`Failed to load ${lang} translations`);\n        const data = await response.json();\n        this.translations[lang] = data;\n      }\n    } catch (error) {\n      console.error(\"Error loading translations:\", error);\n      throw new Error(`Failed to load translations: ${error.message}`);\n    }\n  }\n\n  async setLanguage(language) {\n    // Wait for translations to be loaded\n    if (Object.keys(this.translations).length === 0) {\n      await this.loadTranslations();\n    }\n\n    const elementsToTranslate = [\n      // \"navbar_title\",\n      \"navbar_tree_label\",\n      \"navbar_publish_label\",\n      \"sidebar_tabs_pages_label\",\n      \"sidebar_tabs_templates_label\",\n      \"sidebar_select_action_label\",\n      \"new_page_submit_label\",\n      \"template_added_success_message\",\n      \"theme_applied_success_message\",\n      \"page_loaded_success_message\",\n      \"no_tile_selected_error_message\",\n      \"error_loading_data_message\",\n      \"failed_to_save_current_page_message\",\n      \"tile_has_bg_image_error_message\",\n      \"error_applying_theme_message\",\n      \"no_icon_selected_error_message\",\n      \"error_save_message\",\n      \"accept_popup\",\n      \"close_popup\",\n      \"sidebar_mapping_title\",\n      \"alert_type_success\",\n      \"alert_type_error\",\n      \"cancel_btn\",\n      \"save_btn\",\n      \"publish_confirm_title\",\n      \"publish_confirm_message\",\n      \"nofity_residents_on_publish\",\n      \"publish_confirm_button\",\n      \"publish_cancel_button\",\n      \"enter_title_place_holder\",\n    ];\n\n    elementsToTranslate.forEach((elementId) => {\n      const element = document.getElementById(elementId);\n      if (element) {\n        element.innerText = this.getTranslation(elementId);\n      } else {\n        console.warn(`Element with id '${elementId}' not found`);\n      }\n    });\n  }\n\n  getTranslation(key) {\n    if (!this.translations || Object.keys(this.translations).length === 0) {\n      console.warn(\"Translations not yet loaded\");\n      return key;\n    }\n\n    const translation =\n      this.translations[this.currentLanguage]?.[key] ||\n      this.translations[this.defaultLanguage]?.[key];\n\n    if (!translation) {\n      console.warn(`Translation missing for key '${key}'`);\n      return key;\n    }\n\n    return translation;\n  }\n\n  translateUCStrings() {\n    document.getElementById(\"tile-title\").placeholder = this.getTranslation(\n      \"enter_title_place_holder\"\n    );\n\n    const options = [\n      {\n        value: \"Services\",\n        label: \"icon_category_services\",\n      },\n      {\n        value: \"General\",\n        label: \"icon_category_general\",\n        selected: true,\n      },\n      {\n        value: \"Health\",\n        label: \"icon_category_health\",\n      },\n      {\n        value: \"Living\",\n        label: \"icon_category_living\",\n      },\n    ];\n\n    const select = document.querySelector(\".tb-custom-category-selection\");\n    const button = select.querySelector(\".category-select-button\");\n    const selectedValue = button.querySelector(\".selected-category-value\");\n\n    // Toggle dropdown visibility\n    button.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      const isOpen = optionsList.classList.contains(\"show\");\n      optionsList.classList.toggle(\"show\");\n      button.classList.toggle(\"open\");\n      button.setAttribute(\"aria-expanded\", !isOpen);\n    });\n\n    const optionsList = document.createElement(\"div\");\n    optionsList.classList.add(\"category-options-list\");\n    optionsList.setAttribute(\"role\", \"listbox\");\n    optionsList.innerHTML = \"\";\n\n    // Populate themes into the dropdown\n    options.forEach((opt, index) => {\n      const option = document.createElement(\"div\");\n      option.classList.add(\"category-option\");\n      option.setAttribute(\"role\", \"option\");\n      option.setAttribute(\"data-value\", opt.value);\n      option.textContent = this.getTranslation(opt.label);\n      if (opt.selected) {\n        selectedValue.textContent = this.getTranslation(opt.label);\n        option.classList.add(\"selected\");\n      }\n\n      option.addEventListener(\"click\", (e) => {\n        selectedValue.textContent = this.getTranslation(opt.label);\n\n        // Mark as selected\n        const allOptions = optionsList.querySelectorAll(\".category-option\");\n        allOptions.forEach((opt) => opt.classList.remove(\"selected\"));\n        option.classList.add(\"selected\");\n\n        // Close the dropdown\n        optionsList.classList.remove(\"show\");\n        button.classList.remove(\"open\");\n        button.setAttribute(\"aria-expanded\", \"false\");\n      });\n\n      // Append option to the options list\n      optionsList.appendChild(option);\n    });\n\n    select.appendChild(optionsList);\n  }\n}\n\nmodule.exports = Locale\n","class PageManager {\n    constructor(toolBoxManager) {\n      this.toolBoxManager = toolBoxManager;\n    }\n  \n    loadPageTemplates() {\n      const pageTemplates = document.getElementById(\"page-templates\");\n      this.toolBoxManager.templates.forEach((template, index) => {\n        const blockElement = document.createElement(\"div\");\n  \n        blockElement.className = \"page-template-wrapper\";\n        // Create the number element\n        const numberElement = document.createElement(\"div\");\n        numberElement.className = \"page-template-block-number\";\n        numberElement.textContent = index + 1; // Set the number\n        const templateBlock = document.createElement(\"div\");\n        templateBlock.className = \"page-template-block\";\n        templateBlock.title = this.toolBoxManager.currentLanguage.getTranslation(\n          \"click_to_load_template\"\n        ); //\n        templateBlock.innerHTML = `<div>${template.media}</div>`;\n  \n        blockElement.addEventListener(\"click\", () => {\n          const popup = this.toolBoxManager.popupManager.popupModal();\n          document.body.appendChild(popup);\n          popup.style.display = \"flex\";\n  \n          const closeButton = popup.querySelector(\".close\");\n          closeButton.onclick = () => {\n            popup.style.display = \"none\";\n            document.body.removeChild(popup);\n          };\n  \n          const cancelBtn = popup.querySelector(\"#close_popup\");\n          cancelBtn.onclick = () => {\n            popup.style.display = \"none\";\n            document.body.removeChild(popup);\n          };\n  \n          const acceptBtn = popup.querySelector(\"#accept_popup\");\n          acceptBtn.onclick = () => {\n            popup.style.display = \"none\";\n            document.body.removeChild(popup);\n            this.toolBoxManager.editorManager.templateManager.addFreshTemplate(\n              template.content\n            );\n          };\n        });\n  \n        // Append number and template block to the wrapper\n        blockElement.appendChild(numberElement);\n        blockElement.appendChild(templateBlock);\n        pageTemplates.appendChild(blockElement);\n      });\n    }\n  }\n\nmodule.exports = PageManager","class PopupManager {\n    constructor(toolBoxManager) {\n      this.toolBoxManager = toolBoxManager;\n    }\n  \n    popupModal() {\n      const popup = document.createElement(\"div\");\n      popup.className = \"popup-modal\";\n      popup.innerHTML = `\n            <div class=\"popup\">\n              <div class=\"popup-header\">\n                <span>${this.toolBoxManager.currentLanguage.getTranslation(\n                  \"confirmation_modal_title\"\n                )}</span>\n                <button class=\"close\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 21 21\">\n                      <path id=\"Icon_material-close\" data-name=\"Icon material-close\" d=\"M28.5,9.615,26.385,7.5,18,15.885,9.615,7.5,7.5,9.615,15.885,18,7.5,26.385,9.615,28.5,18,20.115,26.385,28.5,28.5,26.385,20.115,18Z\" transform=\"translate(-7.5 -7.5)\" fill=\"#6a747f\" opacity=\"0.54\"/>\n                  </svg>\n                </button>\n              </div>\n              <hr>\n              <div class=\"popup-body\" id=\"confirmation_modal_message\">\n                ${this.toolBoxManager.currentLanguage.getTranslation(\n                  \"confirmation_modal_message\"\n                )}\n              </div>\n              <div class=\"popup-footer\">\n                <button id=\"accept_popup\" class=\"tb-btn tb-btn-primary\">\n                ${this.toolBoxManager.currentLanguage.getTranslation(\n                  \"accept_popup\"\n                )}\n                </button>\n                <button id=\"close_popup\" class=\"tb-btn tb-btn-outline\">\n                ${this.toolBoxManager.currentLanguage.getTranslation(\n                  \"cancel_btn\"\n                )}\n                </button>\n              </div>\n            </div>\n          `;\n  \n      return popup;\n    }\n  }\n\nmodule.exports = PopupManager","class TemplateManager {\n  constructor(currentLanguage, editorManager) {\n    this.currentLanguage = currentLanguage;\n    this.editorManager = editorManager;\n    this.defaultConstraints = {\n      draggable: false,\n      selectable: false,\n      editable: false,\n      highlightable: false,\n      droppable: false,\n      hoverable: false,\n    };\n  }\n\n  createTemplateHTML(isDefault = false) {\n    let tileBgColor = this.editorManager.toolsSection.currentTheme.colors.accentColor\n    return `\n            <div class=\"template-wrapper ${\n              isDefault ? \"default-template\" : \"\"\n            }\"        \n                  data-gjs-selectable=\"false\"\n                  data-gjs-type=\"tile-wrapper\"\n                  data-gjs-editable=\"false\"\n                  data-gjs-highlightable=\"false\"\n                  data-gjs-droppable=\"false\"\n                  data-gjs-resizable=\"false\"\n                  data-gjs-hoverable=\"false\">\n              <div class=\"template-block\"\n                style=\"background:${tileBgColor}\"\n                tile-bgcolor=\"${tileBgColor}\"\n                tile-bgcolor-name=\"accentColor\"\n                ${defaultTileAttrs} \n                 data-gjs-draggable=\"false\"\n                 data-gjs-selectable=\"true\"\n                 data-gjs-editable=\"false\"\n                 data-gjs-highlightable=\"false\"\n                 data-gjs-droppable=\"false\"\n                 data-gjs-resizable=\"false\"\n                 data-gjs-hoverable=\"false\">\n                \n                 <div class=\"tile-icon-section\"\n                  data-gjs-draggable=\"false\"\n                  data-gjs-selectable=\"false\"\n                  data-gjs-editable=\"false\"\n                  data-gjs-highlightable=\"false\"\n                  data-gjs-droppable=\"false\"\n                  data-gjs-resizable=\"false\"\n                  data-gjs-hoverable=\"false\"\n                  >\n                    <span class=\"tile-close-icon top-right selected-tile-icon\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-resizable=\"false\"\n                      data-gjs-hoverable=\"false\"\n                      >&times;</span>\n                    <span \n                      class=\"tile-icon\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-hoverable=\"false\">\n                    </span>\n                </div>\n                <div class=\"tile-title-section\"\n                  data-gjs-draggable=\"false\"\n                  data-gjs-selectable=\"false\"\n                  data-gjs-editable=\"false\"\n                  data-gjs-highlightable=\"false\"\n                  data-gjs-droppable=\"false\"\n                  data-gjs-resizable=\"false\"\n                  data-gjs-hoverable=\"false\"\n                  >\n                    <span class=\"tile-close-icon top-right selected-tile-title\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-resizable=\"false\"\n                      data-gjs-hoverable=\"false\"\n                      >&times;</span>\n                    <span \n                      class=\"tile-title\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-hoverable=\"false\">${this.currentLanguage.getTranslation(\n                        \"tile_title\"\n                      )}</span>\n                    </div>\n                </div>\n              ${\n                !isDefault\n                  ? `\n                <button class=\"action-button delete-button\" title=\"Delete template\"\n                          data-gjs-draggable=\"false\"\n                          data-gjs-selectable=\"false\"\n                          data-gjs-editable=\"false\"\n                          data-gjs-droppable=\"false\"\n                          data-gjs-highlightable=\"false\"\n                          data-gjs-hoverable=\"false\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                          data-gjs-draggable=\"false\"\n                          data-gjs-selectable=\"false\"\n                          data-gjs-editable=\"false\"\n                          data-gjs-editable=\"false\"\n                          data-gjs-droppable=\"false\"\n                          data-gjs-highlightable=\"false\"\n                          data-gjs-hoverable=\"false\">\n                    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\"/>\n                  </svg>\n                </button>\n              `\n                  : \"\"\n              }\n              <button class=\"action-button add-button-bottom\" title=\"Add template below\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-hoverable=\"false\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-hoverable=\"false\">\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" \n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\"/>\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\"/>\n                </svg>\n              </button>\n              <button class=\"action-button add-button-right\" title=\"Add template right\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-hoverable=\"false\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\">\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" \n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\"/>\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\"/>\n                </svg>\n              </button>\n              <div class=\"resize-handle\"\n                      data-gjs-draggable=\"false\"\n                      data-gjs-selectable=\"false\"\n                      data-gjs-editable=\"false\"\n                      data-gjs-highlightable=\"false\"\n                      data-gjs-droppable=\"false\"\n                      data-gjs-hoverable=\"false\">\n              </div>\n            </div>\n          `;\n  }\n\n  generateTemplateRow(columns, rowIndex) {\n    let tileBgColor = this.editorManager.toolsSection.currentTheme.colors.accentColor\n    let columnWidth = 100 / columns;\n    if (columns === 1) {\n      columnWidth = 100;\n    } else if (columns === 2) {\n      columnWidth = 49;\n    } else if (columns === 3) {\n      columnWidth = 32;\n    }\n\n    let wrappers = \"\";\n\n    for (let i = 0; i < columns; i++) {\n      // Only exclude delete button for first tile of first row\n      const isFirstTileOfFirstRow = rowIndex === 0 && i === 0;\n      const deleteButton = isFirstTileOfFirstRow\n        ? \"\"\n        : `\n                    <button class=\"action-button delete-button\" title=\"Delete template\"\n                        data-gjs-draggable=\"false\"\n                        data-gjs-selectable=\"false\"\n                        data-gjs-editable=\"false\"\n                        data-gjs-droppable=\"false\"\n                        data-gjs-highlightable=\"false\"\n                        data-gjs-hoverable=\"false\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                            data-gjs-draggable=\"false\"\n                            data-gjs-selectable=\"false\"\n                            data-gjs-editable=\"false\"\n                            data-gjs-editable=\"false\"\n                            data-gjs-droppable=\"false\"\n                            data-gjs-highlightable=\"false\"\n                            data-gjs-hoverable=\"false\">\n                            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                                data-gjs-draggable=\"false\"\n                                data-gjs-selectable=\"false\"\n                                data-gjs-editable=\"false\"\n                                data-gjs-highlightable=\"false\"\n                                data-gjs-droppable=\"false\"\n                                data-gjs-hoverable=\"false\"/>\n                        </svg>\n                    </button>`;\n\n      wrappers += `\n                <div class=\"template-wrapper\"\n                          style=\"flex: 0 0 ${columnWidth}%); background: ${tileBgColor}\"\n                          data-gjs-type=\"tile-wrapper\"\n                          data-gjs-selectable=\"false\"\n                          data-gjs-droppable=\"false\">\n\n                          <div class=\"template-block\"\n                            tile-bgcolor=\"${tileBgColor}\"\n                            tile-bgcolor-name=\"accentColor\"\n                            ${defaultTileAttrs}\n                            data-gjs-draggable=\"false\"\n                            data-gjs-selectable=\"true\"\n                            data-gjs-editable=\"false\"\n                            data-gjs-highlightable=\"false\"\n                            data-gjs-droppable=\"false\"\n                            data-gjs-resizable=\"false\"\n                            data-gjs-hoverable=\"false\">\n                            \n                            <div class=\"tile-icon-section\"\n                              data-gjs-draggable=\"false\"\n                              data-gjs-selectable=\"false\"\n                              data-gjs-editable=\"false\"\n                              data-gjs-highlightable=\"false\"\n                              data-gjs-droppable=\"false\"\n                              data-gjs-resizable=\"false\"\n                              data-gjs-hoverable=\"false\"\n                              >\n                                <span class=\"tile-close-icon top-right selected-tile-icon\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-resizable=\"false\"\n                                  data-gjs-hoverable=\"false\"\n                                  >&times;</span>\n                                <span \n                                  class=\"tile-icon\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-hoverable=\"false\">\n                                </span>\n                            </div>\n                            <div class=\"tile-title-section\"\n                              data-gjs-draggable=\"false\"\n                              data-gjs-selectable=\"false\"\n                              data-gjs-editable=\"false\"\n                              data-gjs-highlightable=\"false\"\n                              data-gjs-droppable=\"false\"\n                              data-gjs-resizable=\"false\"\n                              data-gjs-hoverable=\"false\"\n                              >\n                                <span class=\"tile-close-icon top-right selected-tile-title\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-resizable=\"false\"\n                                  data-gjs-hoverable=\"false\"\n                                  >&times;</span>\n                                <span \n                                  class=\"tile-title\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-hoverable=\"false\">${this.currentLanguage.getTranslation(\n                                    \"tile_title\"\n                                  )}</span>\n                                </div>\n                          </div>\n                          ${deleteButton}\n                          <button class=\"action-button add-button-bottom\" title=\"Add template below\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-hoverable=\"false\"\n                                  >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\">\n                              <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" \n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\"/>\n                              <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\"/>\n                            </svg>\n                          </button>\n                          <button class=\"action-button add-button-right\" title=\"Add template right\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-hoverable=\"false\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\">\n                              <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" \n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\"/>\n                              <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" \n                                  data-gjs-draggable=\"false\"\n                                  data-gjs-selectable=\"false\"\n                                  data-gjs-editable=\"false\"\n                                  data-gjs-highlightable=\"false\"\n                                  data-gjs-droppable=\"false\"\n                                  data-gjs-hoverable=\"false\"/>\n                            </svg>\n                          </button>\n                          <div class=\"resize-handle\"\n                              data-gjs-draggable=\"false\"\n                              data-gjs-selectable=\"false\"\n                              data-gjs-editable=\"false\"\n                              data-gjs-highlightable=\"false\"\n                              data-gjs-droppable=\"false\"\n                              data-gjs-hoverable=\"false\">\n                          </div>\n                      </div>\n                `;\n    }\n    return `\n                      <div class=\"container-row\"\n                          data-gjs-type=\"template-wrapper\"\n                          data-gjs-draggable=\"false\"\n                          data-gjs-selectable=\"false\"\n                          data-gjs-editable=\"false\"\n                          data-gjs-highlightable=\"true\"\n                          data-gjs-droppable=\"[data-gjs-type='tile-wrapper']\"\n                          data-gjs-hoverable=\"true\">\n                        ${wrappers}\n                    </div>\n              `;\n  }\n\n  addFreshTemplate(template) {\n    this.editorManager.currentEditor.editor.DomComponents.clear();\n    let fullTemplate = \"\";\n\n    template.forEach((columns, rowIndex) => {\n      const templateRow = this.generateTemplateRow(columns, rowIndex);\n      fullTemplate += templateRow;\n    });\n\n    this.editorManager.currentEditor.editor.addComponents(`\n      <div class=\"frame-container\"\n            id=\"frame-container\"\n            data-gjs-type=\"template-wrapper\"\n            data-gjs-draggable=\"false\"\n            data-gjs-selectable=\"false\"\n            data-gjs-editable=\"false\"\n            data-gjs-highlightable=\"false\"\n            data-gjs-droppable=\"false\"\n            data-gjs-hoverable=\"false\">\n        <div class=\"container-column\"\n              data-gjs-type=\"template-wrapper\"\n              data-gjs-draggable=\"false\"\n              data-gjs-selectable=\"false\"\n              data-gjs-editable=\"false\"\n              data-gjs-highlightable=\"false\"\n              data-gjs-droppable=\"false\"\n              data-gjs-hoverable=\"false\">\n            ${fullTemplate}\n        </div>\n      </div>\n    `);\n\n    const message = this.currentLanguage.getTranslation(\n      \"template_added_success_message\"\n    );\n    const status = \"success\";\n    this.editorManager.toolsSection.ui.displayAlertMessage(message, status);\n  }\n\n  deleteTemplate(templateComponent) {\n    if (\n      !templateComponent ||\n      templateComponent.getClasses().includes(\"default-template\")\n    )\n      return;\n\n    const containerRow = templateComponent.parent();\n    if (!containerRow) return;\n\n    templateComponent.remove();\n\n    const templates = containerRow.components();\n    const newWidth = 100 / templates.length;\n    templates.forEach((template) => {\n      if (template && template.setStyle) {\n        template.addStyle({\n          width: `${newWidth}%`,\n        });\n      }\n    });\n\n    this.updateRightButtons(containerRow);\n  }\n\n  addTemplateRight(templateComponent, editorInstance) {\n    const containerRow = templateComponent.parent();\n    if (!containerRow || containerRow.components().length >= 3) return;\n    const newComponents = editorInstance.addComponents(\n      this.createTemplateHTML()\n    );\n    const newTemplate = newComponents[0];\n    if (!newTemplate) return;\n\n    const index = templateComponent.index();\n    containerRow.append(newTemplate, {\n      at: index + 1,\n    });\n    const templates = containerRow.components();\n\n    const equalWidth = 100 / templates.length;\n    templates.forEach((template) => {\n      template.addStyle({\n        flex: `0 0 calc(${equalWidth}% - 0.3.5rem)`,\n      });\n    });\n\n    this.updateRightButtons(containerRow);\n  }\n\n  addTemplateBottom(templateComponent, editorInstance) {\n    const currentRow = templateComponent.parent();\n    const containerColumn = currentRow?.parent();\n\n    if (!containerColumn) return;\n\n    const newRow = editorInstance.addComponents(`\n            <div class=\"container-row\"\n                data-gjs-type=\"template-wrapper\"\n                data-gjs-draggable=\"false\"\n                data-gjs-selectable=\"false\"\n                data-gjs-editable=\"false\"\n                data-gjs-highlightable=\"false\"\n                data-gjs-droppable=\"[data-gjs-type='tile-wrapper']\"\n                data-gjs-hoverable=\"false\">\n                ${this.createTemplateHTML()}\n            </div>\n            `)[0];\n\n    const index = currentRow.index();\n    containerColumn.append(newRow, {\n      at: index + 1,\n    });\n  }\n\n  updateRightButtons(containerRow) {\n    if (!containerRow) return;\n\n    const templates = containerRow.components();\n    let totalWidth = 0;\n    templates.forEach((template) => {\n      if (!template || !template.view || !template.view.el) return;\n\n      const rightButton = template.view.el.querySelector(\".add-button-right\");\n      if (!rightButton) return;\n      const rightButtonComponent = template.find(\".add-button-right\")[0];\n\n      if (templates.length >= 3) {\n        rightButton.setAttribute(\"disabled\", \"true\");\n        rightButtonComponent.addStyle({\n          display: \"none\",\n        });\n      } else {\n        rightButton.removeAttribute(\"disabled\");\n        rightButtonComponent.addStyle({\n          display: \"flex\",\n        });\n      }\n    });\n  }\n\n  initialContentPageTemplate(contentPageData) {\n    console.log(\"initialContentPageTemplate\", contentPageData);\n    return `\n        <div\n            class=\"content-frame-container test\"\n            id=\"frame-container\"\n            data-gjs-draggable=\"false\"\n            data-gjs-selectable=\"false\"\n            data-gjs-editable=\"false\"\n            data-gjs-highlightable=\"false\"\n            data-gjs-droppable=\"false\"\n            data-gjs-hoverable=\"false\"\n        >\n            <div\n                class=\"container-column\"\n                data-gjs-draggable=\"false\"\n                data-gjs-selectable=\"false\"\n                data-gjs-editable=\"false\"\n                data-gjs-highlightable=\"false\"\n                data-gjs-droppable=\"false\"\n                data-gjs-hoverable=\"false\"\n            >\n                <div\n                    class=\"container-row\"\n                    data-gjs-draggable=\"false\"\n                    data-gjs-selectable=\"false\"\n                    data-gjs-editable=\"false\"\n                    data-gjs-droppable=\"false\"\n                    data-gjs-highlightable=\"true\"\n                    data-gjs-hoverable=\"true\"\n                >\n                    <div\n                        class=\"template-wrapper\"\n                        data-gjs-draggable=\"false\"\n                        data-gjs-selectable=\"false\"\n                        data-gjs-editable=\"false\"\n                        data-gjs-droppable=\"false\"\n                        data-gjs-highlightable=\"true\"\n                        data-gjs-hoverable=\"true\"\n                        style=\"display: flex; width: 100%\"\n                    >\n                        <div\n                            data-gjs-draggable=\"false\"\n                            data-gjs-selectable=\"false\"\n                            data-gjs-editable=\"false\"\n                            data-gjs-highlightable=\"false\"\n                            data-gjs-droppable=\"[data-gjs-type='product-service-description'], [data-gjs-type='product-service-image']\"\n                            data-gjs-resizable=\"false\"\n                            data-gjs-hoverable=\"false\"\n                            style=\"flex: 1; padding: 0\"\n                            class=\"content-page-wrapper\"\n                        >\n                            ${\n                              contentPageData.ProductServiceImage\n                                ? `\n                                <img\n                                    class=\"content-page-block\"\n                                    id=\"product-service-image\"\n                                    data-gjs-draggable=\"true\"\n                                    data-gjs-selectable=\"false\"\n                                    data-gjs-editable=\"false\"\n                                    data-gjs-droppable=\"false\"\n                                    data-gjs-highlightable=\"false\"\n                                    data-gjs-hoverable=\"false\"\n                                    src=\"${contentPageData.ProductServiceImage}\"\n                                    data-gjs-type=\"product-service-image\"\n                                    alt=\"Full-width Image\"\n                                />\n                            `\n                                : \"\"\n                            }\n                            ${\n                              contentPageData.ProductServiceDescription\n                                ? `\n                                <p\n                                    style=\"flex: 1; padding: 0; margin: 0; height: auto;\"\n                                    class=\"content-page-block\"\n                                    data-gjs-draggable=\"true\"\n                                    data-gjs-selectable=\"false\"\n                                    data-gjs-editable=\"false\"\n                                    data-gjs-droppable=\"false\"\n                                    data-gjs-highlightable=\"false\"\n                                    data-gjs-hoverable=\"false\"\n                                    id=\"product-service-description\"\n                                    data-gjs-type=\"product-service-description\"\n                                >\n                                ${contentPageData.ProductServiceDescription}\n                                </p>\n                            `\n                                : \"\"\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cta-button-container\" ${defaultConstraints}></div>\n            </div>\n        </div>\n    `;\n  }\n\n  removeElementOnClick(targetSelector, sectionSelector) {\n    const closeSection =\n      this.editorManager.selectedComponent?.find(targetSelector)[0];\n    if (closeSection) {\n      const closeEl = closeSection.getEl();\n      if (closeEl) {\n        closeEl.onclick = () => {\n          this.editorManager.selectedComponent\n            .find(sectionSelector)[0]\n            .remove();\n        };\n      }\n    }\n  }\n}\n\nmodule.exports = TemplateManager","class ThemeManager {\n  constructor(toolBoxManager) {\n    this.toolBoxManager = toolBoxManager;\n  }\n\n  loadTheme() {\n    const savedTheme = localStorage.getItem(\"selectedTheme\");\n    if (savedTheme) {\n      this.setTheme(savedTheme);\n    }\n  }\n\n  setTheme(themeName) {\n    const theme = this.toolBoxManager.themes.find(\n      (theme) => theme.name === themeName\n    );\n    const select = document.querySelector(\".tb-custom-theme-selection\");\n    select.querySelector(\".selected-theme-value\").textContent = themeName;\n    if (!theme) {\n      return false;\n    }\n\n    this.toolBoxManager.currentTheme = theme;\n\n    this.applyTheme();\n\n    this.toolBoxManager.icons = theme.icons.map((icon) => {\n      return {\n        name: icon.IconName,\n        svg: icon.IconSVG,\n        category: icon.IconCategory,\n      };\n    });\n    this.loadThemeIcons(theme.icons);\n\n    this.themeColorPalette(this.toolBoxManager.currentTheme.colors);\n    localStorage.setItem(\"selectedTheme\", themeName);\n\n    this.applyThemeIconsAndColor(themeName);\n\n    return true;\n  }\n\n  applyTheme() {\n    const root = document.documentElement;\n    const iframes = document.querySelectorAll(\".mobile-frame iframe\");\n\n    if (!iframes.length) return;\n\n    root.style.setProperty(\n      \"--primary-color\",\n      this.toolBoxManager.currentTheme.colors.primaryColor\n    );\n    root.style.setProperty(\n      \"--secondary-color\",\n      this.toolBoxManager.currentTheme.colors.secondaryColor\n    );\n    root.style.setProperty(\n      \"--background-color\",\n      this.toolBoxManager.currentTheme.colors.backgroundColor\n    );\n    root.style.setProperty(\n      \"--text-color\",\n      this.toolBoxManager.currentTheme.colors.textColor\n    );\n    root.style.setProperty(\n      \"--button-bg-color\",\n      this.toolBoxManager.currentTheme.colors.buttonBgColor\n    );\n    root.style.setProperty(\n      \"--button-text-color\",\n      this.toolBoxManager.currentTheme.colors.buttonTextColor\n    );\n    root.style.setProperty(\n      \"--card-bg-color\",\n      this.toolBoxManager.currentTheme.colors.cardBgColor\n    );\n    root.style.setProperty(\n      \"--card-text-color\",\n      this.toolBoxManager.currentTheme.colors.cardTextColor\n    );\n    root.style.setProperty(\n      \"--accent-color\",\n      this.toolBoxManager.currentTheme.colors.accentColor\n    );\n    root.style.setProperty(\n      \"--font-family\",\n      this.toolBoxManager.currentTheme.fontFamily\n    );\n\n    iframes.forEach((iframe) => {\n      const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n\n      if (iframeDoc && iframeDoc.body) {\n        iframeDoc.body.style.setProperty(\n          \"--primary-color\",\n          this.toolBoxManager.currentTheme.colors.primaryColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--secondary-color\",\n          this.toolBoxManager.currentTheme.colors.secondaryColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--background-color\",\n          this.toolBoxManager.currentTheme.colors.backgroundColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--text-color\",\n          this.toolBoxManager.currentTheme.colors.textColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--button-bg-color\",\n          this.toolBoxManager.currentTheme.colors.buttonBgColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--button-text-color\",\n          this.toolBoxManager.currentTheme.colors.buttonTextColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--card-bg-color\",\n          this.toolBoxManager.currentTheme.colors.cardBgColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--card-text-color\",\n          this.toolBoxManager.currentTheme.colors.cardTextColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--accent-color\",\n          this.toolBoxManager.currentTheme.colors.accentColor\n        );\n        iframeDoc.body.style.setProperty(\n          \"--font-family\",\n          this.toolBoxManager.currentTheme.fontFamily\n        );\n      }\n    });\n  }\n\n  applyThemeIconsAndColor(themeName) {\n    const editors = Object.values(this.toolBoxManager.editorManager.editors);\n\n    if (editors && editors.length) {\n      for (let index = 0; index < editors.length; index++) {\n        const editorData = editors[index];\n        if (!editorData || !editorData.editor) {\n          console.error(`Invalid editorData at index ${index}:`, editorData);\n          return;\n        }\n\n        try {\n          let editor = editorData.editor;\n          // Add additional null checks\n          if (!editor || typeof editor.getWrapper !== \"function\") {\n            console.error(`Invalid editor at index ${index}:`, editor);\n            continue;\n          }\n\n          const wrapper = editor.getWrapper();\n\n          const theme = this.toolBoxManager.themes.find(\n            (theme) => theme.name === themeName\n          );\n          const tiles = wrapper.find(\".template-block\");\n\n          tiles.forEach((tile) => {\n            if (!tile) return;\n            // icons change and its color\n            const tileIconName = tile.getAttributes()?.[\"tile-icon\"];\n            if (tileIconName) {\n              const matchingIcon = theme.icons?.find(\n                (icon) => icon.IconName === tileIconName\n              );\n\n              if (matchingIcon) {\n                const tileIconComponent = tile.find(\".tile-icon svg\")?.[0];\n\n                if (tileIconComponent) {\n                  // get current icon color with null checks\n                  const currentIconPath = tileIconComponent.find(\"path\")?.[0];\n                  let currentIconColor = \"#7c8791\"; // default color\n                  if (currentIconPath && currentIconPath.getAttributes()) {\n                    currentIconColor =\n                      currentIconPath.getAttributes()[\"fill\"] ||\n                      currentIconColor;\n                  }\n\n                  let localizedSVG = matchingIcon.IconSVG;\n                  if (localizedSVG) {\n                    localizedSVG = localizedSVG.replace(\n                      /fill=\"[^\"]*\"/g,\n                      `fill=\"${currentIconColor}\"`\n                    );\n                    tileIconComponent.replaceWith(localizedSVG);\n                  }\n                }\n              }\n            }\n\n            const currentTileBgColorName =\n              tile.getAttributes()?.[\"tile-bgcolor-name\"];\n            if (currentTileBgColorName && theme.colors) {\n              const matchingColorCode = theme.colors[currentTileBgColorName];\n\n              if (matchingColorCode) {\n                tile.addAttributes({\n                  \"tile-bgcolor-name\": currentTileBgColorName,\n                  \"tile-bgcolor\": matchingColorCode,\n                });\n\n                tile.addStyle({\n                  \"background-color\": matchingColorCode,\n                });\n              } else {\n                console.warn(\n                  `No matching color found for: ${currentTileBgColorName}`\n                );\n              }\n            }\n          });\n        } catch (error) {\n          console.error(`Error processing editor at index ${index}:`, error);\n        }\n      }\n    }\n\n    const iframes = document.querySelectorAll(\".mobile-frame iframe\");\n\n    if (iframes === null) return;\n\n    iframes.forEach((iframe) => {\n      const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n      if (iframeDoc && iframeDoc.body) {\n        iframeDoc.body.style.setProperty(\n          \"--font-family\",\n          this.toolBoxManager.currentTheme.fontFamily\n        );\n      }\n    });\n  }\n\n  themeColorPalette(colors) {\n    const colorPaletteContainer = document.getElementById(\n      \"theme-color-palette\"\n    );\n    colorPaletteContainer.innerHTML = \"\";\n\n    const colorEntries = Object.entries(colors);\n\n    colorEntries.forEach(([colorName, colorValue], index) => {\n      const alignItem = document.createElement(\"div\");\n      alignItem.className = \"color-item\";\n      const radioInput = document.createElement(\"input\");\n      radioInput.type = \"radio\";\n      radioInput.id = `color-${colorName}`;\n      radioInput.name = \"theme-color\";\n      radioInput.value = colorName;\n\n      const colorBox = document.createElement(\"label\");\n      colorBox.className = \"color-box\";\n      colorBox.setAttribute(\"for\", `color-${colorName}`);\n      colorBox.style.backgroundColor = colorValue;\n      colorBox.setAttribute(\"data-tile-bgcolor\", colorValue);\n\n      alignItem.appendChild(radioInput);\n      alignItem.appendChild(colorBox);\n\n      colorPaletteContainer.appendChild(alignItem);\n\n      colorBox.onclick = () => {\n        this.toolBoxManager.editorManager.selectedComponent.addStyle({\n          \"background-color\": colorValue,\n        });\n        this.toolBoxManager.setAttributeToSelected(\"tile-bgcolor\", colorValue);\n        this.toolBoxManager.setAttributeToSelected(\n          \"tile-bgcolor-name\",\n          colorName\n        );\n      };\n    });\n  }\n\n  colorPalette() {\n    const textColorPaletteContainer =\n      document.getElementById(\"text-color-palette\");\n    const iconColorPaletteContainer =\n      document.getElementById(\"icon-color-palette\");\n\n    // Fixed color values\n    const colorValues = {\n      color1: \"#ffffff\",\n      color2: \"#333333\",\n    };\n\n    Object.entries(colorValues).forEach(([colorName, colorValue]) => {\n      const alignItem = document.createElement(\"div\");\n      alignItem.className = \"color-item\";\n\n      const radioInput = document.createElement(\"input\");\n      radioInput.type = \"radio\";\n      radioInput.id = `text-color-${colorName}`;\n      radioInput.name = \"text-color\";\n      radioInput.value = colorName;\n\n      const colorBox = document.createElement(\"label\");\n      colorBox.className = \"color-box\";\n      colorBox.setAttribute(\"for\", `text-color-${colorName}`);\n      colorBox.style.backgroundColor = colorValue;\n      colorBox.setAttribute(\"data-tile-text-color\", colorValue);\n\n      alignItem.appendChild(radioInput);\n      alignItem.appendChild(colorBox);\n      textColorPaletteContainer.appendChild(alignItem);\n\n      radioInput.onclick = () => {\n        this.toolBoxManager.editorManager.selectedComponent.addStyle({\n          color: colorValue,\n        });\n        this.toolBoxManager.setAttributeToSelected(\n          \"tile-text-color\",\n          colorValue\n        );\n      };\n    });\n\n    // Create options for icon color palette\n    Object.entries(colorValues).forEach(([colorName, colorValue]) => {\n      const alignItem = document.createElement(\"div\");\n      alignItem.className = \"color-item\";\n\n      const radioInput = document.createElement(\"input\");\n      radioInput.type = \"radio\";\n      radioInput.id = `icon-color-${colorName}`;\n      radioInput.name = \"icon-color\";\n      radioInput.value = colorName;\n\n      const colorBox = document.createElement(\"label\");\n      colorBox.className = \"color-box\";\n      colorBox.setAttribute(\"for\", `icon-color-${colorName}`);\n      colorBox.style.backgroundColor = colorValue;\n      colorBox.setAttribute(\"data-tile-icon-color\", colorValue);\n\n      alignItem.appendChild(radioInput);\n      alignItem.appendChild(colorBox);\n      iconColorPaletteContainer.appendChild(alignItem);\n\n      radioInput.onclick = () => {\n        const svgIcon =\n          this.toolBoxManager.editorManager.selectedComponent.find(\n            \".tile-icon path\"\n          )[0];\n        if (svgIcon) {\n          svgIcon.removeAttributes(\"fill\");\n          svgIcon.addAttributes({\n            fill: colorValue,\n          });\n          this.toolBoxManager.setAttributeToSelected(\n            \"tile-icon-color\",\n            colorValue\n          );\n        } else {\n          const message = this.toolBoxManager.currentLanguage.getTranslation(\n            \"no_icon_selected_error_message\"\n          );\n          this.toolBoxManager.ui.displayAlertMessage(message, \"error\");\n        }\n      };\n    });\n  }\n\n  ctaColorPalette() {\n    const ctaColorPaletteContainer =\n      document.getElementById(\"cta-color-palette\");\n    const colorValues = {\n      color1: \"#4C9155\",\n      color2: \"#5068A8\",\n      color3: \"#EEA622\",\n      color4: \"#FF6C37\",\n    };\n\n    Object.entries(colorValues).forEach(([colorName, colorValue]) => {\n      const colorItem = document.createElement(\"div\");\n      colorItem.className = \"color-item\";\n      const radioInput = document.createElement(\"input\");\n      radioInput.type = \"radio\";\n      radioInput.id = `cta-color-${colorName}`;\n      radioInput.name = \"cta-color\";\n      radioInput.value = colorName;\n\n      const colorBox = document.createElement(\"label\");\n      colorBox.className = \"color-box\";\n      colorBox.setAttribute(\"for\", `cta-color-${colorName}`);\n      colorBox.style.backgroundColor = colorValue;\n      colorBox.setAttribute(\"data-cta-color\", colorValue);\n\n      colorItem.appendChild(radioInput);\n      colorItem.appendChild(colorBox);\n      ctaColorPaletteContainer.appendChild(colorItem);\n\n      radioInput.onclick = () => {\n        if (this.toolBoxManager.editorManager.selectedComponent) {\n          const selectedComponent =\n            this.toolBoxManager.editorManager.selectedComponent;\n\n          // Search for components with either class\n          const componentsWithClass = [\n            ...selectedComponent.find(\".cta-main-button\"),\n            ...selectedComponent.find(\".cta-button\"),\n            ...selectedComponent.find(\".img-button\"),\n            ...selectedComponent.find(\".plain-button\"),\n          ];\n\n          // Get the first matching component\n          const button =\n            componentsWithClass.length > 0 ? componentsWithClass[0] : null;\n\n          if (button) {\n            button.addStyle({\n              \"background-color\": colorValue,\n              \"border-color\": colorValue,\n            });\n          }\n          this.toolBoxManager.setAttributeToSelected(\n            \"cta-background-color\",\n            colorValue\n          );\n        }\n      };\n    });\n  }\n\n  listThemesInSelectField() {\n    const select = document.querySelector(\".tb-custom-theme-selection\");\n    const button = select.querySelector(\".theme-select-button\");\n    const selectedValue = button.querySelector(\".selected-theme-value\");\n\n    // Toggle dropdown visibility\n    button.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      const isOpen = optionsList.classList.contains(\"show\");\n      optionsList.classList.toggle(\"show\");\n      button.classList.toggle(\"open\");\n      button.setAttribute(\"aria-expanded\", !isOpen);\n    });\n\n    const optionsList = document.createElement(\"div\");\n    optionsList.classList.add(\"theme-options-list\");\n    optionsList.setAttribute(\"role\", \"listbox\");\n    optionsList.innerHTML = \"\";\n\n    // Populate themes into the dropdown\n    this.toolBoxManager.themes.forEach((theme, index) => {\n      const option = document.createElement(\"div\");\n      option.classList.add(\"theme-option\");\n      option.setAttribute(\"role\", \"option\");\n      option.setAttribute(\"data-value\", theme.name);\n      option.textContent = theme.name;\n\n      if (\n        this.toolBoxManager.currentTheme &&\n        theme.name === this.toolBoxManager.currentTheme.name\n      ) {\n        option.classList.add(\"selected\");\n      }\n\n      option.addEventListener(\"click\", (e) => {\n        selectedValue.textContent = theme.name;\n\n        // Mark as selected\n        const allOptions = optionsList.querySelectorAll(\".theme-option\");\n        allOptions.forEach((opt) => opt.classList.remove(\"selected\"));\n        option.classList.add(\"selected\");\n\n        // Close the dropdown\n        optionsList.classList.remove(\"show\");\n        button.classList.remove(\"open\");\n        button.setAttribute(\"aria-expanded\", \"false\");\n\n        const themeName = theme.name;\n        // update location theme\n        this.toolBoxManager.dataManager.selectedTheme =\n          this.toolBoxManager.themes.find((theme) => theme.name === themeName);\n\n        this.toolBoxManager.dataManager.updateLocationTheme().then((res) => {\n          if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n            return;\n          }\n\n          if (this.setTheme(themeName)) {\n            this.themeColorPalette(this.toolBoxManager.currentTheme.colors);\n\n            localStorage.setItem(\"selectedTheme\", themeName);\n\n            const message = this.toolBoxManager.currentLanguage.getTranslation(\n              \"theme_applied_success_message\"\n            );\n            const status = \"success\";\n            this.toolBoxManager.ui.displayAlertMessage(message, status);\n          } else {\n            const message = this.toolBoxManager.currentLanguage.getTranslation(\n              \"error_applying_theme_message\"\n            );\n            const status = \"error\";\n            this.toolBoxManager.ui.displayAlertMessage(message, status);\n          }\n        });\n      });\n\n      // Append option to the options list\n      optionsList.appendChild(option);\n    });\n\n    select.appendChild(optionsList);\n\n    document.addEventListener(\"click\", (e) => {\n      if (!select.contains(e.target)) {\n        optionsList.classList.remove(\"show\");\n        button.classList.remove(\"open\");\n        button.setAttribute(\"aria-expanded\", \"false\");\n      }\n    });\n  }\n\n  loadThemeIcons(themeIconsList) {\n    const themeIcons = document.getElementById(\"icons-list\");\n\n    let selectedCategory;\n\n    const categoryOptions = document.querySelectorAll(\".category-option\");\n    // selected category is where the category option has a .selected class\n\n    categoryOptions.forEach((option) => {\n      if (option.classList.contains(\"selected\")) {\n        selectedCategory = option.getAttribute(\"data-value\");\n      }\n      option.addEventListener(\"click\", () => {\n        selectedCategory = option.getAttribute(\"data-value\");\n        renderIcons();\n      });\n    });\n\n    const renderIcons = () => {\n      themeIcons.innerHTML = \"\";\n      const filteredIcons = themeIconsList.filter(\n        (icon) => icon.IconCategory.trim() === selectedCategory\n      );\n\n      if (filteredIcons.length === 0) {\n        console.log(\"No icons found for selected category.\");\n      }\n      // Render filtered icons\n      filteredIcons.forEach((icon) => {\n        const iconItem = document.createElement(\"div\");\n        iconItem.classList.add(\"icon\");\n        iconItem.title = icon.IconName;\n\n        const displayName = (() => {\n          const maxChars = 7;\n          const words = icon.IconName.split(\" \");\n\n          if (words.length > 1) {\n            const firstWord = words[0];\n            if (firstWord.length >= maxChars) {\n              return firstWord.slice(0, maxChars) + \"...\";\n            } else {\n              return firstWord;\n            }\n          }\n\n          return icon.IconName.length > maxChars\n            ? icon.IconName.slice(0, maxChars) + \"...\"\n            : icon.IconName;\n        })();\n\n        iconItem.innerHTML = `\n                    ${icon.IconSVG}\n                    <span class=\"icon-title\">${displayName}</span>\n                `;\n\n        iconItem.onclick = () => {\n          if (this.toolBoxManager.editorManager.selectedTemplateWrapper) {\n            const iconComponent =\n              this.toolBoxManager.editorManager.selectedComponent.find(\n                \".tile-icon\"\n              )[0];\n\n            if (iconComponent) {\n              iconComponent.components(icon.IconSVG);\n              this.toolBoxManager.setAttributeToSelected(\n                \"tile-icon\",\n                icon.IconName\n              );\n            }\n          } else {\n            const message = this.toolBoxManager.currentLanguage.getTranslation(\n              \"no_tile_selected_error_message\"\n            );\n            const status = \"error\";\n            this.toolBoxManager.ui.displayAlertMessage(message, status);\n          }\n        };\n\n        themeIcons.appendChild(iconItem);\n      });\n    };\n\n    renderIcons();\n  }\n}\n\nmodule.exports = ThemeManager","class ToolBoxUI {\n  constructor(toolBoxManager) {\n    this.manager = toolBoxManager;\n    this.currentLanguage = toolBoxManager.currentLanguage;\n  }\n\n  updateTileTitle(inputTitle) {\n    if (this.manager.editorManager.selectedTemplateWrapper) {\n      const titleComponent =\n        this.manager.editorManager.selectedComponent.find(\".tile-title\")[0];\n      if (titleComponent) {\n        titleComponent.components(inputTitle);\n        // this.manager.selectedComponent.addAttributes({\n        //   \"tile-title\": inputTitle,\n        // });\n      }\n    }\n  }\n\n  displayAlertMessage(message, status) {\n    const alertContainer = document.getElementById(\"alerts-container\");\n    const alertId = Math.random().toString(10);\n    const alertBox = this.alertMessage(message, status, alertId);\n    alertBox.style.display = \"flex\";\n\n    const closeButton = alertBox.querySelector(\".alert-close-btn\");\n    closeButton.addEventListener(\"click\", () => {\n      this.closeAlert(alertId);\n    });\n\n    setTimeout(() => this.closeAlert(alertId), 5000);\n    alertContainer.appendChild(alertBox);\n  }\n\n  alertMessage(message, status, alertId) {\n    const alertBox = document.createElement(\"div\");\n    alertBox.id = alertId;\n    alertBox.classList = `alert ${status == \"success\" ? \"success\" : \"error\"}`;\n    alertBox.innerHTML = `\n        <div class=\"alert-header\">\n          <strong>\n            ${\n              status == \"success\"\n                ? this.currentLanguage.getTranslation(\"alert_type_success\")\n                : this.currentLanguage.getTranslation(\"alert_type_error\")\n            }\n          </strong>\n          <span class=\"alert-close-btn\">✖</span>\n        </div>\n        <p>${message}</p>\n      `;\n    return alertBox;\n  }\n\n  closeAlert(alertId) {\n    const alert = document.getElementById(alertId);\n    if (alert) {\n      alert.style.opacity = 0;\n      setTimeout(() => alert.remove(), 500);\n    }\n  }\n\n  openToastMessage() {\n    const toast = document.createElement(\"div\");\n    toast.id = \"toast\";\n    toast.textContent = \"Your changes are saved\";\n\n    document.body.appendChild(toast);\n\n    setTimeout(() => {\n      toast.style.opacity = \"1\";\n      toast.style.transform = \"translateX(-50%) translateY(0)\";\n    }, 100);\n\n    setTimeout(() => {\n      toast.style.opacity = \"0\";\n      setTimeout(() => {\n        document.body.removeChild(toast);\n      }, 500);\n    }, 3000);\n  }\n\n  updateTileProperties(editor, page) {\n    if (page && page.PageIsContentPage) {\n      this.updateContentPageProperties();\n    } else {\n      this.updateTemplatePageProperties();\n    }\n  }\n\n  updateContentPageProperties() {\n    const currentCtaBgColor =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"cta-background-color\"\n      ];\n    const CtaRadios = document.querySelectorAll(\n      '#cta-color-palette input[type=\"radio\"]'\n    );\n\n    CtaRadios.forEach((radio) => {\n      const colorBox = radio.nextElementSibling;\n      radio.checked =\n        colorBox.getAttribute(\"data-cta-color\").toUpperCase() ===\n        currentCtaBgColor.toUpperCase();\n    });\n  }\n\n  updateTemplatePageProperties() {\n    this.updateAlignmentProperties();\n    this.updateColorProperties();\n    this.updateActionProperties();\n  }\n\n  updateAlignmentProperties() {\n    const alignmentTypes = [\n      { type: \"text\", attribute: \"tile-text-align\" },\n      { type: \"icon\", attribute: \"tile-icon-align\" },\n    ];\n\n    alignmentTypes.forEach(({ type, attribute }) => {\n      const currentAlign =\n        this.manager.editorManager.selectedComponent?.getAttributes()?.[\n          attribute\n        ];\n      [\"left\", \"center\", \"right\"].forEach((align) => {\n        document.getElementById(`${type}-align-${align}`).checked =\n          currentAlign === align;\n      });\n    });\n  }\n\n  updateColorProperties() {\n    const currentTextColor =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"tile-text-color\"\n      ];\n    const textColorRadios = document.querySelectorAll(\n      '.text-color-palette.text-colors .color-item input[type=\"radio\"]'\n    );\n    textColorRadios.forEach((radio) => {\n      const colorBox = radio.nextElementSibling;\n      radio.checked =\n        colorBox.getAttribute(\"data-tile-text-color\") === currentTextColor;\n    });\n\n    // Update icon color\n    const currentIconColor =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"tile-icon-color\"\n      ];\n    const iconColorRadios = document.querySelectorAll(\n      '.text-color-palette.icon-colors .color-item input[type=\"radio\"]'\n    );\n    iconColorRadios.forEach((radio) => {\n      const colorBox = radio.nextElementSibling;\n      radio.checked =\n        colorBox.getAttribute(\"data-tile-icon-color\") === currentIconColor;\n    });\n\n    // Update background color\n    const currentBgColor =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"tile-bgcolor\"\n      ];\n    const radios = document.querySelectorAll(\n      '#theme-color-palette input[type=\"radio\"]'\n    );\n    radios.forEach((radio) => {\n      const colorBox = radio.nextElementSibling;\n      radio.checked =\n        colorBox.getAttribute(\"data-tile-bgcolor\") === currentBgColor;\n    });\n  }\n\n  updateActionProperties() {\n    const currentActionName =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"tile-action-object\"\n      ];\n    const currentActionId =\n      this.manager.editorManager.selectedComponent?.getAttributes()?.[\n        \"tile-action-object-id\"\n      ];\n    const propertySection = document.getElementById(\"selectedOption\");\n    const selectedOptionElement = document.getElementById(currentActionId);\n\n    const allOptions = document.querySelectorAll(\".category-content li\");\n    allOptions.forEach((option) => {\n      option.style.background = \"\";\n    });\n\n    if (currentActionName && currentActionId && selectedOptionElement) {\n      propertySection.textContent = currentActionName;\n      propertySection.innerHTML += ' <i class=\"fa fa-angle-down\"></i>';\n      selectedOptionElement.style.background = \"#f0f0f0\";\n    }\n  }\n\n  pageContentCtas(callToActions, editorInstance) {\n    const contentPageCtas = document.getElementById(\"call-to-actions\");\n    this.renderCtas(callToActions, editorInstance, contentPageCtas);\n    this.setupButtonLayoutListeners(editorInstance);\n    this.setupBadgeClickListener(editorInstance);\n  }\n\n  renderCtas(callToActions, editorInstance, contentPageCtas) {\n    contentPageCtas.innerHTML = \"\";\n    callToActions.forEach((cta) => {\n      const ctaItem = this.createCtaItem(cta);\n      this.attachClickHandler(ctaItem, cta, editorInstance);\n      contentPageCtas.appendChild(ctaItem);\n    });\n  }\n\n  createCtaItem(cta) {\n    const ctaItem = document.createElement(\"div\");\n    ctaItem.classList.add(\"call-to-action-item\");\n    ctaItem.title = cta.CallToActionName;\n\n    const ctaType = this.getCtaType(cta.CallToActionType);\n    ctaItem.innerHTML = `<i class=\"${ctaType.icon}\"></i>`;\n\n    return ctaItem;\n  }\n\n  getCtaType(type) {\n    const ctaTypeMap = {\n      Phone: {\n        icon: \"fas fa-phone-alt\",\n        iconList: \".fas.fa-phone-alt\",\n      },\n      Email: {\n        icon: \"fas fa-envelope\",\n        iconList: \".fas.fa-envelope\",\n      },\n      SiteUrl: {\n        icon: \"fas fa-link\",\n        iconList: \".fas.fa-link\",\n      },\n      Form: {\n        icon: \"fas fa-file\",\n        iconList: \".fas.fa-file\",\n      },\n    };\n\n    return (\n      ctaTypeMap[type] || {\n        icon: \"fas fa-question\",\n        iconList: \".fas.fa-question\",\n      }\n    );\n  }\n\n  generateCtaComponent(cta, backgroundColor = \"#5068a8\") {\n    const ctaType = this.getCtaType(cta.CallToActionType);\n    return `\n      <div class=\"cta-container-child cta-child\" \n            id=\"id-${cta.CallToActionId}\"\n            data-gjs-type=\"cta-buttons\"\n            cta-button-id=\"${cta.CallToActionId}\"\n            data-gjs-draggable=\"false\"\n            data-gjs-editable=\"false\"\n            data-gjs-highlightable=\"false\"\n            data-gjs-droppable=\"false\"\n            data-gjs-resizable=\"false\"\n            data-gjs-hoverable=\"false\"\n            cta-button-label=\"${cta.CallToActionName}\"\n            cta-button-type=\"${cta.CallToActionType}\"\n            cta-button-action=\"${\n              cta.CallToActionPhone ||\n              cta.CallToActionEmail ||\n              cta.CallToActionUrl\n            }\"\n            cta-background-color=\"#5068a8\"\n          >\n            <div class=\"cta-button\" ${defaultConstraints} style=\"background-color: #5068a8;\">\n              <i class=\"${ctaType.icon}\" ${defaultConstraints}></i>\n              <div class=\"cta-badge\" ${defaultConstraints}><i class=\"fa fa-minus\" ${defaultConstraints}></i></div>\n            </div>\n            <div class=\"cta-label\" ${defaultConstraints}>${\n          cta.CallToActionName\n        }</div>\n      </div>\n    `;\n  }\n\n  handleExistingButton(existingButton, cta, selectedComponent, editorInstance) {\n    const existingBackgroundColor =\n      existingButton.getAttributes()[\"cta-background-color\"];\n    const updatedCtaComponent = this.generateCtaComponent(\n      cta,\n      existingBackgroundColor\n    );\n\n    if (\n      selectedComponent.getAttributes()[\"cta-button-id\"] === cta.CallToActionId\n    ) {\n      editorInstance.once(\"component:add\", (component) => {\n        const addedComponent = editorInstance\n          .getWrapper()\n          .find(`#id-${cta.CallToActionId}`)[0];\n        if (addedComponent) {\n          editorInstance.select(addedComponent);\n        }\n      });\n      selectedComponent.replaceWith(updatedCtaComponent);\n    }\n  }\n\n  attachClickHandler(ctaItem, cta, editorInstance) {\n    ctaItem.onclick = (e) => {\n      e.preventDefault();\n      const ctaButton = editorInstance\n        .getWrapper()\n        .find(\".cta-button-container\")[0];\n\n      if (!ctaButton) {\n        console.error(\"CTA Button container not found.\");\n        return;\n      }\n\n      const selectedComponent = this.manager.editorManager.selectedComponent;\n      if (!selectedComponent) {\n        console.error(\"No selected component found.\");\n        return;\n      }\n\n      const existingButton = ctaButton.find(`#id-${cta.CallToActionId}`)?.[0];\n\n      if (existingButton) {\n        this.handleExistingButton(\n          existingButton,\n          cta,\n          selectedComponent,\n          editorInstance\n        );\n        return;\n      }\n\n      ctaButton.append(this.generateCtaComponent(cta));\n    };\n  }\n\n  setupButtonLayoutListeners(editorInstance) {\n    this.setupPlainButtonListener(editorInstance);\n    this.setupImageButtonListener(editorInstance);\n  }\n\n  // Helper method to check if component is a valid CTA\n  isValidCtaComponent(attributes) {\n    return attributes.hasOwnProperty(\"cta-button-label\") &&\n           attributes.hasOwnProperty(\"cta-button-type\") &&\n           attributes.hasOwnProperty(\"cta-button-action\");\n  }\n\n  // Extract CTA attributes from component\n  extractCtaAttributes(component) {\n    const attributes = component.getAttributes();\n    return {\n      ctaId: attributes[\"cta-button-id\"],\n      ctaName: attributes[\"cta-button-label\"],\n      ctaType: attributes[\"cta-button-type\"],\n      ctaAction: attributes[\"cta-button-action\"],\n      ctaButtonBgColor: attributes[\"cta-background-color\"]\n    };\n  }\n\n  // Get icon based on CTA type\n  getCtaTypeIcon(ctaType) {\n    const iconMap = {\n      Phone: \"fas fa-phone-alt\",\n      Email: \"fas fa-envelope\",\n      SiteUrl: \"fas fa-link\",\n      Form: \"fas fa-file\"\n    };\n    return iconMap[ctaType] || \"fas fa-question\";\n  }\n\n  // Generate common button attributes\n  getCommonButtonAttributes(ctaAttributes) {\n    const { ctaId, ctaName, ctaType, ctaAction, ctaButtonBgColor } = ctaAttributes;\n    return `\n      data-gjs-draggable=\"false\"\n      data-gjs-editable=\"false\"\n      data-gjs-highlightable=\"false\"\n      data-gjs-droppable=\"false\"\n      data-gjs-resizable=\"false\"\n      data-gjs-hoverable=\"false\"\n      data-gjs-type=\"cta-buttons\"\n      id=\"id-${ctaId}\"\n      cta-button-id=\"${ctaId}\"\n      cta-button-label=\"${ctaName}\"\n      cta-button-type=\"${ctaType}\"\n      cta-button-action=\"${ctaAction}\"\n      cta-background-color=\"${ctaButtonBgColor}\"\n      cta-full-width=\"true\"\n    `;\n  }\n\n  // Generate plain button component\n  generatePlainButtonComponent(ctaAttributes) {\n    const { ctaName, ctaButtonBgColor } = ctaAttributes;\n    return `\n      <div class=\"plain-button-container\" ${this.getCommonButtonAttributes(ctaAttributes)}>\n        <button style=\"background-color: ${ctaButtonBgColor}; border-color: ${ctaButtonBgColor};\" \n                class=\"plain-button\" ${defaultConstraints}>\n          <div class=\"cta-badge\" ${defaultConstraints}>\n            <i class=\"fa fa-minus\" ${defaultConstraints}></i>\n          </div>\n          ${ctaName}\n        </button>\n      </div>\n    `;\n  }\n\n  // Generate image button component\n  generateImageButtonComponent(ctaAttributes) {\n    const { ctaName, ctaButtonBgColor, ctaType } = ctaAttributes;\n    const icon = this.getCtaTypeIcon(ctaType);\n    return `\n      <div class=\"img-button-container\" ${this.getCommonButtonAttributes(ctaAttributes)}>\n        <div style=\"background-color: ${ctaButtonBgColor}; border-color: ${ctaButtonBgColor};\" \n             class=\"img-button\" ${defaultConstraints}>\n          <i class=\"${icon} img-button-icon\" ${defaultConstraints}></i>\n          <div class=\"cta-badge\" ${defaultConstraints}>\n            <i class=\"fa fa-minus\" ${defaultConstraints}></i>\n          </div>\n          <span class=\"img-button-label\" ${defaultConstraints}>${ctaName}</span>\n          <i class=\"fa fa-angle-right img-button-arrow\" ${defaultConstraints}></i>\n        </div>\n      </div>\n    `;\n  }\n\n  // Handle component replacement\n  handleComponentReplacement(editorInstance, ctaId, newComponent) {\n    editorInstance.once(\"component:add\", () => {\n      const addedComponent = editorInstance.getWrapper().find(`#id-${ctaId}`)[0];\n      if (addedComponent) {\n        editorInstance.select(addedComponent);\n      }\n    });\n    this.manager.editorManager.selectedComponent.replaceWith(newComponent);\n  }\n\n  // Handle button click\n  handleButtonClick(editorInstance, generateComponent) {\n    const ctaContainer = editorInstance.getWrapper().find(\".cta-button-container\")[0];\n    if (!ctaContainer) return;\n\n    const selectedComponent = this.manager.editorManager.selectedComponent;\n    if (!selectedComponent) return;\n\n    const attributes = selectedComponent.getAttributes();\n    if (!this.isValidCtaComponent(attributes)) {\n      const message = this.currentLanguage.getTranslation(\"please_select_cta_button\");\n      this.displayAlertMessage(message, \"error\");\n      return;\n    }\n\n    const ctaAttributes = this.extractCtaAttributes(selectedComponent);\n    const newComponent = generateComponent(ctaAttributes);\n    this.handleComponentReplacement(editorInstance, ctaAttributes.ctaId, newComponent);\n  }\n\n  // Setup plain button listener\n  setupPlainButtonListener(editorInstance) {\n    const plainButton = document.getElementById(\"plain-button-layout\");\n    plainButton.onclick = (e) => {\n      e.preventDefault();\n      this.handleButtonClick(editorInstance, \n        (attrs) => this.generatePlainButtonComponent(attrs));\n    };\n  }\n\n  // Setup image button listener\n  setupImageButtonListener(editorInstance) {\n    const imgButton = document.getElementById(\"img-button-layout\");\n    imgButton.onclick = (e) => {\n      e.preventDefault();\n      this.handleButtonClick(editorInstance, \n        (attrs) => this.generateImageButtonComponent(attrs));\n    };\n  }\n\n  setupBadgeClickListener(editorInstance) {\n    const wrapper = editorInstance.getWrapper();\n    wrapper.view.el.addEventListener(\"click\", (e) => {\n      const badge = e.target.closest(\".cta-badge\");\n      if (!badge) return;\n\n      e.stopPropagation();\n\n      const ctaChild = badge.closest(\n        \".cta-container-child, .plain-button-container, .img-button-container\"\n      );\n      if (ctaChild)\n        if (ctaChild) {\n          // Check if this is the last child in the container\n          const parentContainer = ctaChild.closest(\".cta-button-container\");\n          const childId = ctaChild.getAttribute(\"id\");\n          const component = editorInstance.getWrapper().find(`#${childId}`)[0];\n\n          if (component) {\n            component.remove();\n          }\n        }\n    });\n  }\n\n  activateCtaBtnStyles(selectedCtaComponent) {\n    if (selectedCtaComponent) {\n      const isCtaButtonSelected = selectedCtaComponent.findType(\".cta-buttons\");\n      if (isCtaButtonSelected) {\n          document.querySelector(\".cta-button-layout-container\")\n            .style.display = \"flex\";\n      }\n    }\n  }\n}\n\nmodule.exports = ToolBoxUI\n","class ToolBoxManager {\n  constructor(\n    editorManager,\n    dataManager,\n    themes,\n    icons,\n    templates,\n    mapping,\n    media,\n    locale\n  ) {\n    this.editorManager = editorManager;\n    this.dataManager = dataManager;\n    this.themes = themes;\n    this.icons = icons;\n    this.currentTheme = null;\n    this.templates = templates;\n    this.mappingsItems = mapping;\n    this.selectedFile = null;\n    this.media = media;\n    this.currentLanguage = locale;\n    this.ui = new ToolBoxUI(this);\n    this.init(locale.currentLanguage);\n  }\n\n  async init(language) {\n    try {\n      this.currentLanguage = await new Locale(language).init();\n      this.themeManager = new ThemeManager(this);\n      this.eventListenerManager = new EventListenerManager(this);\n      this.popupManager = new PopupManager(this);\n      this.pageManager = new PageManager(this);\n      console.log(\"ToolboxManager initialized\", this.currentLanguage);\n\n      await this.initializeManagers();\n      await this.setupComponents();\n      this.setupEventListeners();\n    } catch (error) {\n      console.error(\"Failed to initialize toolbox:\", error);\n    }\n  }\n\n  async initializeManagers() {\n    await this.dataManager.getPages().then((res) => {\n      if (this.checkIfNotAuthenticated(res)) {\n        return;\n      }\n      localStorage.clear();\n    });\n\n    this.themeManager.loadTheme();\n    this.themeManager.listThemesInSelectField();\n    this.themeManager.colorPalette();\n    this.themeManager.ctaColorPalette();\n    this.pageManager.loadPageTemplates();\n  }\n\n  setupComponents() {\n    this.actionList = new ActionListComponent(\n      this.editorManager,\n      this.dataManager,\n      this.currentLanguage,\n      this\n    );\n\n    this.mediaComponent = new MediaComponent(\n      this.dataManager,\n      this.editorManager,\n      this.currentLanguage,\n      this\n    );\n  }\n\n  setupEventListeners() {\n    this.eventListenerManager.setupTabListeners();\n    this.eventListenerManager.setupMappingListeners();\n    this.eventListenerManager.setupPublishListeners();\n    this.eventListenerManager.setupAlignmentListeners();\n    this.eventListenerManager.setupOpacityListener();\n    this.eventListenerManager.setupAutoSave();\n\n    const sidebarInputTitle = document.getElementById(\"tile-title\");\n    sidebarInputTitle.addEventListener(\"input\", (e) => {\n      this.ui.updateTileTitle(e.target.value);\n    });\n  }\n\n  publishPages(isNotifyResidents) {\n    const editors = Object.values(this.editorManager.editors);\n    if (editors && editors.length) {\n      const pageDataList = this.preparePageDataList(editors);\n      if (pageDataList.length) {\n        this.sendPageUpdateRequest(pageDataList, isNotifyResidents);\n      }\n    }\n  }\n\n  preparePageDataList(editors) {\n    return this.dataManager.pages.SDT_PageCollection.map(page=>{\n      let projectData = JSON.parse(page.PageGJSJson)\n      const jsonData = page.PageIsContentPage\n          ? mapContentToPageData(projectData, page)\n          : mapTemplateToPageData(projectData, page);\n      return {\n        PageId: page.PageId,\n        PageName: page.PageName,\n        PageJsonContent: JSON.stringify(jsonData),\n        PageGJSHtml: page.PageGJSHtml,\n        PageGJSJson: page.PageGJSJson,\n        SDT_Page: jsonData,\n        PageIsPublished: true,\n      };\n    })\n    return editors\n      .map((editorData) => {\n        const pageId = editorData.pageId;\n        const editor = editorData.editor;\n        const page = this.dataManager.pages.SDT_PageCollection.find(\n          (page) => page.PageId == pageId\n        );\n\n        if (!pageId) return null;\n\n        const projectData = editor.getProjectData();\n        const htmlData = editor.getHtml();\n        const pageName = page.PageName;\n        const jsonData = page.PageIsContentPage\n          ? mapContentToPageData(projectData, page)\n          : mapTemplateToPageData(projectData, page);\n\n        return {\n          PageId: pageId,\n          PageName: pageName,\n          PageJsonContent: JSON.stringify(jsonData),\n          PageGJSHtml: htmlData,\n          PageGJSJson: JSON.stringify(projectData),\n          SDT_Page: jsonData,\n          PageIsPublished: true,\n        };\n      })\n      .filter(Boolean);\n  }\n\n  async sendPageUpdateRequest(pageDataList, isNotifyResidents) {\n    const payload = {\n      IsNotifyResidents: isNotifyResidents,\n      PagesList: pageDataList,\n    };\n\n    try {\n      const res = await this.dataManager.updatePagesBatch(payload);\n      if (this.checkIfNotAuthenticated(res)) {\n        return;\n      }\n      this.ui.displayAlertMessage(\"All Pages Saved Successfully\", \"success\");\n    } catch (error) {\n      console.error(\"Error saving pages:\", error);\n      this.ui.displayAlertMessage(\n        \"An error occurred while saving pages.\",\n        \"error\"\n      );\n    }\n  }\n\n  autoSavePage(editorData) {\n    const pageId = editorData.pageId;\n    const editor = editorData.editor;\n    const page = this.dataManager.pages.SDT_PageCollection.find(\n      (page) => page.PageId == pageId\n    );\n\n    if (pageId) {\n      const data = {\n        PageId: pageId,\n        PageName: page.PageName,\n        PageGJSHtml: editor.getHtml(),\n        PageGJSJson: JSON.stringify(editor.getProjectData()),\n      };\n\n      this.dataManager.updatePage(data).then((res) => {\n        if (this.checkIfNotAuthenticated(res)) {\n          return;\n        }\n\n        this.dataManager.getPages().then((pages) => {\n          this.editorManager.pages = pages.SDT_PageCollection;\n        });\n\n        this.ui.openToastMessage();\n      });\n    }\n  }\n\n  unDoReDo(editorInstance) {\n    const um = editorInstance.UndoManager;\n\n    const undoButton = document.getElementById(\"undo\");\n    undoButton.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      if (editorInstance === this.editorManager.currentEditor.editor && um.hasUndo()) {\n        um.undo();\n      }\n    });\n\n    const redoButton = document.getElementById(\"redo\");\n    redoButton.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      if (editorInstance === this.editorManager.currentEditor.editor && um.hasRedo()) {\n        um.redo();\n      }\n    });\n  }\n\n  checkIfNotAuthenticated(res) {\n    if (res.error.Status === \"Error\") {\n      console.error(\n        \"Error updating theme. Status:\",\n        res.error.Status,\n        \"Message:\",\n        res.error.Message\n      );\n\n      this.ui.displayAlertMessage(\n        this.currentLanguage.getTranslation(\"not_authenticated_message\"),\n        \"error\"\n      );\n\n      return true;\n    }\n    return false;\n  }\n\n  setAttributeToSelected(attributeName, attributeValue) {\n    if (this.editorManager.selectedComponent) {\n      this.editorManager.selectedComponent.addAttributes({\n        [attributeName]: attributeValue,\n      });\n    } else {\n      this.ui.displayAlertMessage(\n        this.currentLanguage.getTranslation(\"no_tile_selected_error_message\"),\n        \"error\"\n      );\n    }\n  }\n}\n\nmodule.exports = ToolBoxManager\n","class ActionListComponent {\n  editorManager = null;\n  dataManager = null;\n  toolBoxManager = null;\n  selectedObject = null;\n  selectedId = null;\n  pageOptions = [];\n\n  constructor(editorManager, dataManager, currentLanguage, toolBoxManager) {\n    this.editorManager = editorManager;\n    this.dataManager = dataManager;\n    this.currentLanguage = currentLanguage;\n    this.toolBoxManager = toolBoxManager;\n\n    this.categoryData = [\n      {\n        name: \"Page\",\n        label: this.currentLanguage.getTranslation(\"category_page\"),\n        options: [],\n      },\n      {\n        name: \"Service/Product Page\",\n        label: this.currentLanguage.getTranslation(\"category_services_or_page\"),\n        options: [],\n      },\n      {\n        name: \"Predefined Page\",\n        label: this.currentLanguage.getTranslation(\"category_predefined_page\"),\n        options: [],\n      },\n    ];\n    this.init();\n  }\n\n  init() {\n    this.dataManager\n      .getPages()\n      .then((res) => {\n        if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n          return;\n        }\n\n        this.pageOptions = res.SDT_PageCollection.filter(\n          (page) => !page.PageIsContentPage && !page.PageIsPredefined\n        );\n        this.predefinedPageOptions = res.SDT_PageCollection.filter(\n          (page) => page.PageIsPredefined && page.PageName != \"Home\"\n        );\n        this.servicePageOptions = this.dataManager.services.map((service) => {\n          return {\n            PageId: service.ProductServiceId,\n            PageName: service.ProductServiceName,\n          };\n        });\n        this.categoryData.forEach((category) => {\n          if (category.name === \"Page\") {\n            category.options = this.pageOptions;\n          } else if (category.name == \"Service/Product Page\") {\n            category.options = this.servicePageOptions;\n          } else if (category.name == \"Predefined Page\") {\n            category.options = this.predefinedPageOptions;\n          }\n        });\n\n        this.populateDropdownMenu();\n      })\n      .catch((error) => {\n        console.error(\"Error fetching pages:\", error);\n      });\n  }\n\n  mapPageNamesToOptions(pages) {\n    alert(\"ActionListComponent init\");\n    const pageOptions = pages.map((page) => ({\n      PageName: page.Name,\n      PageId: page.Id,\n    }));\n    return pageOptions;\n  }\n\n  populateDropdownMenu() {\n    const dropdownMenu = document.getElementById(\"dropdownMenu\");\n    dropdownMenu.innerHTML = \"\";\n    this.categoryData.forEach((category) => {\n      const categoryElement = this.createCategoryElement(category);\n      dropdownMenu.appendChild(categoryElement);\n    });\n\n    this.setupDropdownHeader();\n    this.setupOutsideClickListener();\n    this.setupCategoryToggle();\n    this.setupItemClickListener();\n    this.setupSearchInputListener();\n  }\n\n  createCategoryElement(category) {\n    const categoryElement = document.createElement(\"details\");\n    categoryElement.classList.add(\"category\");\n    categoryElement.setAttribute(\"data-category\", category.label);\n\n    const summaryElement = document.createElement(\"summary\");\n    summaryElement.innerHTML = `${category.label} <i class=\"fa fa-angle-right\"></i>`;\n    categoryElement.appendChild(summaryElement);\n\n    const searchBox = document.createElement(\"div\");\n    searchBox.classList.add(\"search-container\");\n    searchBox.innerHTML = `<i class=\"fas fa-search search-icon\"></i><input type=\"text\" placeholder=\"Search\" class=\"search-input\" />`;\n    categoryElement.appendChild(searchBox);\n\n    const categoryContent = document.createElement(\"ul\");\n    categoryContent.classList.add(\"category-content\");\n\n    category.options.forEach((option) => {\n      const optionElement = document.createElement(\"li\");\n      optionElement.textContent = option.PageName;\n      optionElement.id = option.PageId;\n      optionElement.dataset.category = category.name\n      categoryContent.appendChild(optionElement);\n    });\n\n    const noRecordsMessage = document.createElement(\"li\");\n    noRecordsMessage.textContent = \"No records found\";\n    noRecordsMessage.classList.add(\"no-records-message\");\n    noRecordsMessage.style.display = \"none\";\n    categoryContent.appendChild(noRecordsMessage);\n\n    categoryElement.appendChild(categoryContent);\n    return categoryElement;\n  }\n\n  setupDropdownHeader() {\n    const dropdownHeader = document.getElementById(\"selectedOption\");\n    const dropdownMenu = document.getElementById(\"dropdownMenu\");\n\n    if (!this.added) {\n      dropdownHeader.removeEventListener(\"click\", (e) => {});\n      dropdownHeader.addEventListener(\"click\", (e) => {\n        dropdownMenu.style.display =\n          dropdownMenu.style.display === \"block\" ? \"none\" : \"block\";\n        dropdownHeader.querySelector(\"i\").classList.toggle(\"fa-angle-up\");\n        dropdownHeader.querySelector(\"i\").classList.toggle(\"fa-angle-down\");\n      });\n    }\n\n    this.added = true;\n  }\n\n  setupOutsideClickListener() {\n    const dropdownHeader = document.getElementById(\"selectedOption\");\n    const dropdownMenu = document.getElementById(\"dropdownMenu\");\n\n    document.addEventListener(\"click\", (event) => {\n      if (\n        !dropdownHeader.contains(event.target) &&\n        !dropdownMenu.contains(event.target)\n      ) {\n        dropdownMenu.style.display = \"none\";\n        dropdownHeader.querySelector(\"i\").classList.remove(\"fa-angle-up\");\n        dropdownHeader.querySelector(\"i\").classList.add(\"fa-angle-down\");\n      }\n    });\n  }\n\n  setupCategoryToggle() {\n    const categories = document.querySelectorAll(\".category\");\n\n    categories.forEach((category) => {\n      category.addEventListener(\"toggle\", () => {\n        this.selectedObject = category.dataset.category;\n        const searchBox = category.querySelector(\".search-container\");\n        const icon = category.querySelector(\"summary i\");\n        const isOpen = category.open;\n\n        if (isOpen) {\n          categories.forEach((otherCategory) => {\n        if (otherCategory !== category) {\n          otherCategory.open = false;\n          otherCategory.querySelector(\".search-container\").style.display =\n            \"none\";\n          otherCategory\n            .querySelector(\"summary i\")\n            .classList.replace(\"fa-angle-down\", \"fa-angle-right\");\n        }\n          });\n          searchBox.style.display = \"block\";\n          icon.classList.replace(\"fa-angle-right\", \"fa-angle-down\");\n        } else {\n          searchBox.style.display = \"none\";\n          icon.classList.replace(\"fa-angle-down\", \"fa-angle-right\");\n        }\n      });\n    });\n  }\n\n  setupItemClickListener() {\n    const dropdownHeader = document.getElementById(\"selectedOption\");\n    const dropdownMenu = document.getElementById(\"dropdownMenu\");\n\n    document.querySelectorAll(\".category-content li\").forEach((item) => {\n      item.addEventListener(\"click\", () => {\n        this.selectedObject = item.dataset.category\n        dropdownHeader.textContent = `${\n          item.closest(\".category\").dataset.category\n        }, ${item.textContent}`;\n        \n        const editor = this.editorManager.getCurrentEditor();\n        const editorId = editor.getConfig().container;\n        const editorContainerId = `${editorId}-frame`;\n        if (editor.getSelected()) {\n          const titleComponent = editor.getSelected().find(\".tile-title\")[0];\n          const currentPageId = localStorage.getItem(\"pageId\");\n          const tileTitle = item.textContent.toUpperCase()\n          if (currentPageId !== undefined) {\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-action-object-id\",\n              item.id\n            );\n            this.toolBoxManager.setAttributeToSelected(\n              \"tile-action-object\",\n              `${item.closest(\".category\").dataset.category}, ${\n                tileTitle\n              }`\n            );\n\n            if (this.selectedObject == \"Service/Product Page\") {\n              this.createContentPage(item.id, editorContainerId);\n            }else{\n              $(editorContainerId).nextAll().remove();\n              this.editorManager.createChildEditor((this.editorManager.getPage(item.id)))\n            }\n          }\n\n          if (titleComponent) {\n            titleComponent.components(tileTitle);\n\n            const sidebarInputTitle = document.getElementById(\"tile-title\");\n            if (sidebarInputTitle) {\n              sidebarInputTitle.textContent = tileTitle;\n            }\n          }\n        }\n        dropdownHeader.innerHTML += ' <i class=\"fa fa-angle-down\"></i>';\n        dropdownMenu.style.display = \"none\";\n      });\n    });\n  }\n\n  setupSearchInputListener() {\n    document.querySelectorAll(\".search-input\").forEach((input) => {\n      input.addEventListener(\"input\", function () {\n        const filter = this.value.toLowerCase();\n        const items = this.closest(\".category\").querySelectorAll(\n          \".category-content li:not(.no-records-message)\"\n        );\n        let hasVisibleItems = false;\n\n        items.forEach((item) => {\n          if (item.textContent.toLowerCase().includes(filter)) {\n            item.style.display = \"block\";\n            hasVisibleItems = true;\n          } else {\n            item.style.display = \"none\";\n          }\n        });\n\n        const noRecordsMessage = this.closest(\".category\").querySelector(\n          \".no-records-message\"\n        );\n        noRecordsMessage.style.display = hasVisibleItems ? \"none\" : \"block\";\n      });\n    });\n  }\n\n  createContentPage(pageId, editorContainerId) {\n    this.dataManager.createContentPage(pageId).then((res) => {\n      if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n        return;\n      }\n      this.dataManager.getPages().then(res=>{\n        $(editorContainerId).nextAll().remove();\n        this.editorManager.createChildEditor(this.editorManager.getPage(pageId))\n      })\n    });\n  }\n}\n","class MappingComponent {\n    treeContainer = document.getElementById(\"tree-container\");\n    isLoading = false;\n  \n    constructor(dataManager, editorManager, toolBoxManager, currentLanguage) {\n        this.dataManager = dataManager;\n        this.editorManager = editorManager;\n        this.toolBoxManager = toolBoxManager;\n        this.currentLanguage = currentLanguage;\n        this.boundCreatePage = this.handleCreatePage.bind(this);\n    }\n  \n    init() {\n        this.setupEventListeners();\n        //this.loadPageTree();\n        this.listPagesListener();\n        this.homePage = this.dataManager.pages.SDT_PageCollection.find(page=>page.PageName==\"Home\")\n        if (this.homePage) {\n            this.createPageTree(this.homePage.PageId, \"tree-container\")\n        }\n    }\n  \n    listPagesListener () {\n        const listAllPages = document.getElementById(\"list-all-pages\");\n        listAllPages.addEventListener(\"click\", () => {\n            this.handleListAllPages();\n        });\n    }\n\n    handleListAllPages() {\n        try {\n            this.dataManager.getPages().then((res) => {\n                if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n                    return;\n                }\n                \n                const newTree = this.createPageList(res.SDT_PageCollection, true);\n                this.clearMappings();\n                this.treeContainer.appendChild(newTree);\n\n                this.hidePagesList();\n            });\n        } catch (error) {\n            this.displayMessage(\"Error loading pages\", \"error\");\n        } finally {\n            this.isLoading = false;\n        }\n    }\n\n    hidePagesList() {\n        const listAllPages = document.getElementById(\"list-all-pages\");\n        listAllPages.style.display = \"none\";\n\n        const hidePagesList = document.getElementById(\"hide-pages\");\n        hidePagesList.style.display = \"block\";\n\n        hidePagesList.addEventListener(\"click\", () => {\n            listAllPages.style.display = \"block\";\n            hidePagesList.style.display = \"none\";\n            this.init()\n        });\n    }\n\n    getPage(pageId) {\n        return this.dataManager.pages.SDT_PageCollection.find((page) => page.PageId == pageId);\n    }\n\n    createPageTree(rootPageId, childDivId){\n        let homePage = this.getPage(rootPageId)\n        let homePageJSON = JSON.parse(homePage.PageGJSJson)\n        const pages = homePageJSON.pages;\n        const containerRows =\n            pages[0].frames[0].component.components[0].components[0].components;\n\n        let childPages = []\n\n        containerRows.forEach(containerRow => {\n            let templateWrappers = containerRow.components\n            if(templateWrappers) {\n                templateWrappers.forEach(templateWrapper => {\n                    let templateBlocks = templateWrapper.components\n                    templateBlocks.forEach(templateBlock => {\n                        if (templateBlock.classes.includes(\"template-block\")) {\n                            let pageId = templateBlock.attributes[\"tile-action-object-id\"]\n                            let page = this.getPage(pageId)\n                            if (page) {\n                                childPages.push({Id: pageId, Name:page.PageName, IsContentPage:page.PageIsContentPage})\n                            }\n                        }\n                    })\n                })\n            }\n        })\n        const newTree = this.createTree(childPages, true);\n        this.treeContainer = document.getElementById(childDivId)\n        this.clearMappings();\n        this.treeContainer.appendChild(newTree);\n    }\n\n    setupEventListeners() {\n        const createPageButton = document.getElementById(\"page-submit\");\n        const pageInput = document.getElementById(\"page-title\");\n  \n        createPageButton.removeEventListener(\"click\", this.boundCreatePage);\n  \n        pageInput.addEventListener(\"input\", () => {\n            createPageButton.disabled = !pageInput.value.trim() || this.isLoading;\n        });\n  \n        createPageButton.addEventListener(\"click\", this.boundCreatePage);\n    }\n  \n    async loadPageTree() {\n        if (this.isLoading) return;\n  \n        try {\n            this.isLoading = true;\n            this.dataManager.getPagesService().then((res) => {\n                if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n                    return;\n                }\n                \n                console.log(res);\n                const newTree = this.createTree(res.SDT_PageStructureCollection, true);\n                this.clearMappings();\n                this.treeContainer.appendChild(newTree);\n            });\n        } catch (error) {\n            this.displayMessage(\"Error loading pages\", \"error\");\n        } finally {\n            this.isLoading = false;\n        }\n    }\n  \n    async handleCreatePage(e) {\n        e.preventDefault();\n  \n        if (this.isLoading) return;\n  \n        const pageInput = document.getElementById(\"page-title\");\n        const createPageButton = document.getElementById(\"page-submit\");\n        const pageTitle = pageInput.value.trim();\n  \n        if (!pageTitle) return;\n  \n        try {\n            this.isLoading = true;\n            createPageButton.disabled = true;\n            pageInput.disabled = true; // Disable input during creation\n            // Create the page\n            await this.dataManager.createNewPage(pageTitle, this.toolBoxManager.currentTheme).then((res) => {\n                if (this.toolBoxManager.checkIfNotAuthenticated(res)) {\n                    return;\n                }\n  \n                pageInput.value = \"\";\n  \n                this.clearMappings();\n  \n                this.dataManager.getPagesService().then((res) => {\n  \n                    let treePages = res.SDT_PageStructureCollection.map((page) => {\n                        return {\n                            Id: page.Id,\n                            Name: page.Name\n                        };\n                    });\n  \n                    const newTree = this.createTree(treePages, true);\n                    this.treeContainer.appendChild(newTree);\n                    this.toolBoxManager.actionList.init();\n\n                    this.displayMessage(`${this.currentLanguage.getTranslation(\"page_created\")}`, \"success\");\n                });\n            });\n  \n        } catch (error) {\n            this.displayMessage(`${this.currentLanguage.getTranslation(\"error_creating_page\")}`, \"error\");\n        } finally {\n            this.isLoading = false;\n            createPageButton.disabled = !pageInput.value.trim();\n            pageInput.disabled = false; // Re-enable input\n        }\n    }\n  \n    clearMappings() {\n        while (this.treeContainer.firstChild) {\n            this.treeContainer.removeChild(this.treeContainer.firstChild);\n        }\n    }\n  \n    createTree(data) {\n        const buildListItem = (item) => {\n            const listItem = document.createElement(\"li\");\n            listItem.classList.add(\"tb-custom-list-item\");\n            const childDiv = document.createElement(\"div\")\n            childDiv.classList.add(\"child-div\")\n            childDiv.id = `child-div-${item.Id}`\n            childDiv.style.position = 'relative'\n            childDiv.style.paddingLeft = '20px'\n\n  \n            const menuItem = document.createElement(\"div\");\n            menuItem.classList.add(\"tb-custom-menu-item\");\n  \n            const toggle = document.createElement(\"span\");\n            toggle.classList.add(\"tb-dropdown-toggle\");\n            toggle.setAttribute(\"role\", \"button\");\n            toggle.setAttribute(\"aria-expanded\", \"false\");\n            const icon = item.IsContentPage ? 'fa-file' : 'fa-caret-right tree-icon'\n            toggle.innerHTML = `<i class=\"fa ${icon}\"></i><span>${item.Name}</span>`;\n  \n            const deleteIcon = document.createElement(\"i\");\n            deleteIcon.classList.add(\"fa-regular\", \"fa-trash-can\", \"tb-delete-icon\");\n            deleteIcon.setAttribute(\"data-id\", item.Id);\n  \n            deleteIcon.addEventListener(\"click\", (event) =>\n                handleDelete(event, item.Id, listItem)\n            );\n  \n            menuItem.appendChild(toggle);\n            if (item.Name !== \"Home\") {\n                menuItem.appendChild(deleteIcon);\n            }\n            listItem.appendChild(menuItem);\n            listItem.appendChild(childDiv)\n            if (item.Children) {\n                const dropdownMenu = document.createElement(\"ul\");\n                dropdownMenu.classList.add(\"tb-tree-dropdown-menu\");\n  \n                item.Children.forEach((child) => {\n                    const dropdownItem = buildDropdownItem(child, item);\n                    dropdownMenu.appendChild(dropdownItem);\n                });\n  \n                listItem.appendChild(dropdownMenu);\n                listItem.classList.add(\"tb-dropdown\");\n  \n                listItem.addEventListener(\"click\", (e) =>\n                    toggleDropdown(e, listItem, menuItem)\n                );\n            }\n  \n            listItem.addEventListener(\"click\", (e) => {\n                e.stopPropagation();\n                this.handlePageSelection(item);\n                this.createPageTree(item.Id, `child-div-${item.Id}`)\n            });\n  \n            return listItem;\n        };\n  \n        const buildDropdownItem = (child, parent) => {\n            const dropdownItem = document.createElement(\"li\");\n            dropdownItem.classList.add(\"tb-dropdown-item\");\n            dropdownItem.innerHTML = `<span><i style=\"margin-right: 10px;\" class=\"fa-regular fa-file tree-icon\"></i>${child.Name}</span><i data-id=\"${child.Id}\" class=\"fa-regular fa-trash-can tb-delete-icon\"></i>`;\n  \n            const childDeleteIcon = dropdownItem.querySelector(\".tb-delete-icon\");\n            childDeleteIcon.addEventListener(\"click\", (event) =>\n                handleDelete(event, child.Id, dropdownItem)\n            );\n  \n            dropdownItem.addEventListener(\"click\", (e) => {\n                e.stopPropagation();\n                this.handlePageSelection(child, true, parent);\n            });\n  \n            return dropdownItem;\n        };\n  \n        const handleDelete = (event, id, elementToRemove) => {\n            event.stopPropagation();\n            const title = \"Delete Page\";\n            const message = \"Are you sure you want to delete this page?\";\n            const popup = this.popupModal(title, message);\n            document.body.appendChild(popup);\n            popup.style.display = \"flex\";\n  \n            const deleteButton = popup.querySelector(\"#yes_delete\");\n            const closeButton = popup.querySelector(\"#close_popup\");\n            const closePopup = popup.querySelector(\".close\");\n  \n            deleteButton.addEventListener(\"click\", () => {\n                if (this.dataManager.deletePage(id)) {\n                    elementToRemove.remove();\n                }\n                popup.remove();\n            });\n  \n            closeButton.addEventListener(\"click\", () => {\n                popup.remove();\n            });\n  \n            closePopup.addEventListener(\"click\", () => {\n                popup.remove();\n            });\n        };\n  \n        const toggleDropdown = (event, listItem, menuItem) => {\n            event.stopPropagation();\n  \n            const isActive = listItem.classList.contains(\"active\");\n  \n            document.querySelectorAll(\".tb-dropdown.active\").forEach((dropdown) => {\n                dropdown.classList.remove(\"active\");\n                dropdown\n                    .querySelector(\".tb-dropdown-toggle\")\n                    .setAttribute(\"aria-expanded\", \"false\");\n                dropdown\n                    .querySelector(\".tb-custom-menu-item\")\n                    .classList.remove(\"active-tree-item\");\n            });\n  \n            if (!isActive) {\n                listItem.classList.add(\"active\");\n                menuItem.classList.add(\"active-tree-item\");\n                listItem\n                    .querySelector(\".tb-dropdown-toggle\")\n                    .setAttribute(\"aria-expanded\", \"true\");\n            } else {\n                menuItem.classList.remove(\"active-tree-item\");\n                listItem\n                    .querySelector(\".tb-dropdown-toggle\")\n                    .setAttribute(\"aria-expanded\", \"false\");\n            }\n        };\n  \n        const container = document.createElement(\"ul\");\n        container.classList.add(\"tb-custom-list\");\n  \n        const sortedData = JSON.parse(JSON.stringify(data)).sort((a, b) =>\n            a.Name === \"Home\" ? -1 : b.Name === \"Home\" ? 1 : 0\n        );\n  \n        sortedData.forEach((item) => {\n            const listItem = buildListItem(item);\n            container.appendChild(listItem);\n        });\n  \n        return container;\n    }\n\n    createPageList(data) {\n        const buildListItem = (item) => {\n            const listItem = document.createElement(\"li\");\n            listItem.classList.add(\"tb-custom-list-item\");\n    \n            const menuItem = document.createElement(\"div\");\n            menuItem.classList.add(\"tb-custom-menu-item\");\n            menuItem.classList.add(\"page-list-items\");\n    \n            const toggle = document.createElement(\"span\");\n            toggle.style.textTransform = \"capitalize\";\n            toggle.classList.add(\"tb-dropdown-toggle\");\n            toggle.setAttribute(\"role\", \"button\");\n            toggle.setAttribute(\"aria-expanded\", \"false\");\n            toggle.innerHTML = `<i class=\"fa-regular fa-file tree-icon\"></i><span>&nbsp; ${item.PageName}</span>`;\n    \n            const deleteIcon = document.createElement(\"i\");\n            deleteIcon.classList.add(\"fa-regular\", \"fa-trash-can\", \"tb-delete-icon\");\n            deleteIcon.setAttribute(\"data-id\", item.Id);\n    \n            deleteIcon.addEventListener(\"click\", (event) =>\n                handleDelete(event, item.PageId, listItem)\n            );\n    \n            menuItem.appendChild(toggle);\n            if (item.Name !== \"Home\") {\n                menuItem.appendChild(deleteIcon);\n            }\n            listItem.appendChild(menuItem);\n        \n            // listItem.addEventListener(\"click\", (e) => {\n            //     e.stopPropagation();\n            //     this.handlePageSelection(item);\n            // });\n    \n            return listItem;\n        };\n    \n        const handleDelete = (event, id, elementToRemove) => {\n            event.stopPropagation();\n            const title = \"Delete Page\";\n            const message = \"Are you sure you want to delete this page?\";\n            const popup = this.popupModal(title, message);\n            document.body.appendChild(popup);\n            popup.style.display = \"flex\";\n    \n            const deleteButton = popup.querySelector(\"#yes_delete\");\n            const closeButton = popup.querySelector(\"#close_popup\");\n            const closePopup = popup.querySelector(\".close\");\n    \n            deleteButton.addEventListener(\"click\", () => {\n                if (this.dataManager.deletePage(id)) {\n                    elementToRemove.remove();\n                    this.displayMessage(`${this.currentLanguage.getTranslation(\"page_deleted\")}`, \"success\");\n                } else {\n                    this.displayMessage(`${this.currentLanguage.getTranslation(\"error_while_deleting_page\")}`, \"error\");\n                }\n                popup.remove();\n            });\n    \n            closeButton.addEventListener(\"click\", () => {\n                popup.remove();\n            });\n    \n            closePopup.addEventListener(\"click\", () => {\n                popup.remove();\n            });\n        };\n    \n        const container = document.createElement(\"ul\");\n        container.classList.add(\"tb-custom-list\");\n    \n        const sortedData = JSON.parse(JSON.stringify(data)).sort((a, b) =>\n            a.PageName === \"Home\" ? -1 : b.PageName === \"Home\" ? 1 : 0\n        );\n    \n        sortedData.forEach((item) => {\n            const listItem = buildListItem(item);\n            container.appendChild(listItem);\n        });\n    \n        return container;\n    }\n  \n    popupModal(title, message) {\n        const popup = document.createElement(\"div\");\n        popup.className = \"popup-modal\";\n        popup.innerHTML = `\n          <div class=\"popup\">\n            <div class=\"popup-header\">\n              <span>${title}</span>\n              <button class=\"close\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 21 21\">\n                    <path id=\"Icon_material-close\" data-name=\"Icon material-close\" d=\"M28.5,9.615,26.385,7.5,18,15.885,9.615,7.5,7.5,9.615,15.885,18,7.5,26.385,9.615,28.5,18,20.115,26.385,28.5,28.5,26.385,20.115,18Z\" transform=\"translate(-7.5 -7.5)\" fill=\"#6a747f\" opacity=\"0.54\"/>\n                </svg>\n              </button>\n            </div>\n            <hr>\n            <div class=\"popup-body\" id=\"confirmation_modal_message\">\n              ${message}\n            </div>\n            <div class=\"popup-footer\">\n              <button id=\"yes_delete\" class=\"tb-btn tb-btn-primary\">\n                Delete\n              </button>\n              <button id=\"close_popup\" class=\"tb-btn tb-btn-outline\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        `;\n  \n        return popup;\n    }\n  \n    async handlePageSelection(item, isChild = false, parent = null) {\n        if (this.isLoading) return;\n  \n        try {\n            this.isLoading = true;\n            // Locate the page data\n            const page = this.dataManager.pages.SDT_PageCollection.find(\n                (page) => page.PageId === item.Id\n            );\n            if (!page) throw new Error(`Page with ID ${item.Id} not found`);\n  \n            const editors = Object.values(this.editorManager.editors);\n            const mainEditor = editors[0];\n  \n            if (mainEditor) {\n                const editor = mainEditor.editor;\n                const editorId = editor.getConfig().container;\n                const editorContainerId = `${editorId}-frame`;\n  \n                if (isChild) {\n                    if (parent?.Id) {\n                        const parentEditorId = editors[1].editor.getConfig().container;\n                        document\n                            .querySelector(`${parentEditorId}-frame`)\n                            .nextElementSibling?.remove();\n                        this.editorManager.createChildEditor(page);\n                    }\n                } else {\n                    // Remove extra frames\n                    $(editorContainerId).nextAll().remove();\n                    this.editorManager.createChildEditor(page);\n  \n                }\n            }\n        } catch (error) {\n            this.displayMessage(\"Error loading page\", \"error\");\n        } finally {\n            this.isLoading = false;\n        }\n    }\n  \n    checkActivePage(id) {\n        return localStorage.getItem(\"pageId\") === id;\n    }\n  \n    updateActivePageName() {\n        return this.editorManager.getCurrentPageName();\n    }\n  \n    displayMessage(message, status) {\n        this.toolBoxManager.ui.displayAlertMessage(message, status);\n    }\n  }\n\n","const iconsData = [\n    {\n      name: \"Broom\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 32.86 26.791\">\n            <path id=\"Path_942\" data-name=\"Path 942\" d=\"M27.756,3.986a1.217,1.217,0,0,0-1.2,1.234v9.736a2.433,2.433,0,0,0-2.434,2.434v1.217H27.57a1.217,1.217,0,0,0,.4,0h3.459V17.39a2.433,2.433,0,0,0-2.434-2.434V5.22a1.217,1.217,0,0,0-1.236-1.234ZM11.953,4a4.049,4.049,0,0,0-3.6,2.579,3.784,3.784,0,0,0-.663-.145,4.278,4.278,0,0,0-4.26,4.26,4.152,4.152,0,0,0,.062.609H3.434a1.217,1.217,0,1,0,0,2.434H3.6l.825,6.19-3,2.629a1.218,1.218,0,0,0,1.6,1.835l1.79-1.566-.385-2.9,6.729-5.89a1.217,1.217,0,0,1,1.6,1.835L4.808,22.826l.777,5.838A2.437,2.437,0,0,0,8,30.777h7.906a2.434,2.434,0,0,0,2.413-2.113l1.992-14.925h.162a1.217,1.217,0,1,0,0-2.434h-.062a4.152,4.152,0,0,0,.062-.609,4.278,4.278,0,0,0-4.26-4.26,3.784,3.784,0,0,0-.663.145A4.049,4.049,0,0,0,11.953,4Zm0,2.434a1.8,1.8,0,0,1,1.8,1.626,1.217,1.217,0,0,0,1.709.975A1.817,1.817,0,0,1,18.038,10.7a1.858,1.858,0,0,1-.107.609H5.975a1.859,1.859,0,0,1-.107-.609A1.817,1.817,0,0,1,8.445,9.037a1.217,1.217,0,0,0,1.709-.975A1.8,1.8,0,0,1,11.953,6.437Zm12.17,14.6a16.837,16.837,0,0,0-2.434,8.519,1.217,1.217,0,0,0,1.217,1.217h9.736a1.216,1.216,0,0,0,1.21-1.348,16.907,16.907,0,0,0-2.427-8.388h-7.3Z\" transform=\"translate(-1 -3.986)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n    {\n      name: \"Car\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 33.969 27.499\">\n            <path id=\"Path_940\" data-name=\"Path 940\" d=\"M33.625,15.208l-2.689-7.7A5.236,5.236,0,0,0,26,4H11.967A5.233,5.233,0,0,0,7.034,7.507l-2.689,7.7A5.247,5.247,0,0,0,2,19.588V28.88a2.613,2.613,0,1,0,5.226,0V27.228s6.9.342,11.758.342,11.758-.342,11.758-.342V28.88a2.613,2.613,0,1,0,5.226,0V19.588A5.248,5.248,0,0,0,33.625,15.208ZM8,12.659,9.5,8.372a2.614,2.614,0,0,1,2.467-1.753H26a2.614,2.614,0,0,1,2.467,1.753l1.5,4.287a.936.936,0,0,1-1.03,1.24,62.318,62.318,0,0,0-9.952-.733,62.318,62.318,0,0,0-9.952.733A.936.936,0,0,1,8,12.659Zm-.124,9.673a1.964,1.964,0,1,1,1.96-1.964A1.963,1.963,0,0,1,7.879,22.332ZM22.9,21.023H15.065a1.309,1.309,0,0,1,0-2.619H22.9a1.309,1.309,0,0,1,0,2.619Zm7.186,1.309a1.964,1.964,0,1,1,1.96-1.964A1.963,1.963,0,0,1,30.09,22.332Z\" transform=\"translate(-2 -4)\" fill=\"#7c8791\"/>\n          </svg>\n  \n         `,\n    },\n    {\n      name: \"Heart\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 31.83 28.479\">\n            <path id=\"Path_941\" data-name=\"Path 941\" d=\"M24.689,3.007a9.543,9.543,0,0,0-6.774,3.3,9.543,9.543,0,0,0-6.774-3.3A8.865,8.865,0,0,0,3.768,6.654C-2.379,14.723,9.259,24.162,12,26.7c1.638,1.516,3.659,3.317,4.865,4.384a1.583,1.583,0,0,0,2.106,0c1.206-1.067,3.228-2.868,4.865-4.384,2.738-2.534,14.377-11.973,8.228-20.041A8.86,8.86,0,0,0,24.689,3.007Z\" transform=\"translate(-2 -3.001)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n    {\n      name: \"Home\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 28.752 28.752\">\n            <path id=\"Path_937\" data-name=\"Path 937\" d=\"M17.376,2a1.2,1.2,0,0,0-.838.342L3.47,13.03l-.044.035-.044.037v0A1.2,1.2,0,0,0,4.2,15.178H5.4V28.356a2.4,2.4,0,0,0,2.4,2.4H26.96a2.4,2.4,0,0,0,2.4-2.4V15.178h1.2a1.2,1.2,0,0,0,.817-2.075l-.019-.014q-.039-.036-.082-.068l-1.914-1.565V6.792a1.2,1.2,0,0,0-1.2-1.2h-1.2a1.2,1.2,0,0,0-1.2,1.2V8.516l-7.574-6.2A1.2,1.2,0,0,0,17.376,2ZM20.97,17.574h4.792v9.584H20.97Z\" transform=\"translate(-3 -2)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n    {\n      name: \"Health\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 26.214 27.498\">\n            <path id=\"Path_938\" data-name=\"Path 938\" d=\"M26.3,4.75H20.208a4.433,4.433,0,0,0-8.2,0H5.913A2.834,2.834,0,0,0,3,7.5V26.748A2.834,2.834,0,0,0,5.913,29.5H26.3a2.834,2.834,0,0,0,2.913-2.75V7.5A2.834,2.834,0,0,0,26.3,4.75Zm-10.194,0a1.418,1.418,0,0,1,1.456,1.375,1.459,1.459,0,0,1-2.913,0A1.418,1.418,0,0,1,16.107,4.75Zm4.369,15.124H17.564v2.75A1.418,1.418,0,0,1,16.107,24h0a1.418,1.418,0,0,1-1.456-1.375v-2.75H11.738A1.418,1.418,0,0,1,10.282,18.5h0a1.418,1.418,0,0,1,1.456-1.375h2.913v-2.75A1.418,1.418,0,0,1,16.107,13h0a1.418,1.418,0,0,1,1.456,1.375v2.75h2.913A1.418,1.418,0,0,1,21.933,18.5h0A1.418,1.418,0,0,1,20.476,19.874Z\" transform=\"translate(-3 -2)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n    {\n      name: \"Foods\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 32.813 27.572\">\n            <path id=\"Path_939\" data-name=\"Path 939\" d=\"M22.959,3.986a.656.656,0,0,0-.646.665V5.964q0,.019,0,.038A5.905,5.905,0,0,0,17.1,11.214H15.75a.656.656,0,0,0-.656.656v4.594H11.933a7.534,7.534,0,0,0,.445-1.969h.091a.656.656,0,1,0,0-1.313H11.9a6.673,6.673,0,0,0,.481-1.969h.091a.656.656,0,1,0,0-1.313H11.9a6.673,6.673,0,0,0,.481-1.969h.091a.656.656,0,1,0,0-1.313H2.625a.656.656,0,1,0,0,1.313h.091A6.674,6.674,0,0,0,3.2,9.9H2.625a.656.656,0,1,0,0,1.313h.091A6.674,6.674,0,0,0,3.2,13.183H2.625a.656.656,0,1,0,0,1.313h.091a7.535,7.535,0,0,0,.445,1.969H.656A.656.656,0,0,0,0,17.12v6.563a3.271,3.271,0,0,0,5.906,1.948,3.251,3.251,0,0,0,5.25,0,3.251,3.251,0,0,0,5.25,0,3.251,3.251,0,0,0,5.25,0,3.251,3.251,0,0,0,5.25,0,3.271,3.271,0,0,0,5.906-1.948V17.12a.656.656,0,0,0-.656-.656H30.844V11.87a.656.656,0,0,0-.656-.656H28.837A5.905,5.905,0,0,0,23.624,6q0-.019,0-.038V4.652a.656.656,0,0,0-.666-.665ZM4.029,7.933h7.037A5.272,5.272,0,0,1,10.473,9.9H4.621A5.272,5.272,0,0,1,4.029,7.933Zm0,3.281h7.037a5.272,5.272,0,0,1-.592,1.969H4.621A5.272,5.272,0,0,1,4.029,11.214Zm12.378,1.313H29.531v3.938H16.406ZM4.029,14.5h7.037a5.272,5.272,0,0,1-.592,1.969H4.621A5.272,5.272,0,0,1,4.029,14.5Zm-1.4,13.729V30.9a.656.656,0,0,0,1.313,0V28.23a4.352,4.352,0,0,1-.656.046A3.64,3.64,0,0,1,2.625,28.224Zm27.562,0a3.64,3.64,0,0,1-.656.053,4.352,4.352,0,0,1-.656-.046V30.9a.656.656,0,0,0,1.313,0Z\" transform=\"translate(0 -3.986)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n    {\n      name: \"Laundry\",\n      svg: `\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"25\" viewBox=\"0 0 30.411 28.722\">\n            <path id=\"Path_943\" data-name=\"Path 943\" d=\"M13.236,4a2.053,2.053,0,0,0,0,4.1h2.323l-.32.333-.034.033-2.493,2.58a8.153,8.153,0,0,1-1.539-1.907.674.674,0,0,0-1.158,0c-.021.036-1.94,3.543-5.723,3.73l-.98-6.247a.669.669,0,0,0-.638-.584.652.652,0,0,0-.517.238.7.7,0,0,0-.149.564l1.07,6.83s0,.005,0,.008L5.973,32.147s0,.006,0,.009a.7.7,0,0,0,.071.21l.012.02a.679.679,0,0,0,.137.17l.009.007a.657.657,0,0,0,.186.114l.008,0a.641.641,0,0,0,.227.041H27.778A.641.641,0,0,0,28,32.68l.019-.007a.656.656,0,0,0,.186-.114h0l0-.005a.679.679,0,0,0,.136-.168l.009-.017a.7.7,0,0,0,.075-.22l2.9-18.464s0-.005,0-.008l1.07-6.83a.7.7,0,0,0-.222-.662.644.644,0,0,0-.668-.112.681.681,0,0,0-.413.555l-.98,6.252a6.184,6.184,0,0,1-2.519-.672A4.91,4.91,0,0,0,26.423,7.5L24.262,5.265a4.348,4.348,0,0,0-3.184-1.256L13.238,4Zm0,1.368,7.84.009a3.031,3.031,0,0,1,2.251.855l2.161,2.236a3.493,3.493,0,0,1,0,4.832l-6.758,6.9,0,0a.636.636,0,0,1-.935,0,.685.685,0,0,1-.154-.711l2.573-2.662.009-.009q.024-.024.045-.049a.7.7,0,0,0-.016-.908.645.645,0,0,0-.874-.091l-.005.005-.026.021q-.021.018-.041.037l-.008.008-.01.009-.022.023-2.4,2.383-.009.009a2,2,0,0,0-.292.4l-1.508,1.56a.636.636,0,0,1-.935,0,.69.69,0,0,1,0-.967l4.228-4.374a.682.682,0,0,0,.12-.162h0a.7.7,0,0,0-.094-.793.646.646,0,0,0-.756-.16l-.005,0a.659.659,0,0,0-.161.108l-.037.037L13.191,18.29l-.8.825a.636.636,0,0,1-.935,0,.69.69,0,0,1,0-.967l.567-.586,4.185-4.33a.682.682,0,0,0,.12-.163.7.7,0,0,0-.166-.863.644.644,0,0,0-.85.02l-.005.005-.034.033-4.185,4.329a.636.636,0,0,1-.935,0,.688.688,0,0,1,0-.966L16.14,9.436,17.623,7.9a.7.7,0,0,0,.143-.745.661.661,0,0,0-.61-.422H13.236a.684.684,0,0,1,0-1.368Z\" transform=\"translate(-1.998 -4)\" fill=\"#7c8791\"/>\n          </svg>\n         `,\n    },\n  ];\n  \n  const defaultTileAttrs = `\n    tile-text=\"Tile\"\n    tile-text-color=\"#000000\"\n    tile-text-align=\"left\"\n  \n    tile-icon=\"\"\n    tile-icon-color=\"#000000\"\n    tile-icon-align=\"left\"\n  \n    tile-bg-image=\"\"\n    tile-bg-image-opacity=100\n  \n    tile-action-object=\"Page\"\n    tile-action-object-id=\"\"\n  `;\n  \n  const defaultConstraints = `\n      data-gjs-draggable=\"false\"\n      data-gjs-selectable=\"false\"\n      data-gjs-editable=\"false\"\n      data-gjs-highlightable=\"false\"\n      data-gjs-droppable=\"false\"\n      data-gjs-resizable=\"false\"\n      data-gjs-hoverable=\"false\"\n  `;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Clock = require(\"../src/classes/Clock\")\nconst Locale = require(\"../src/classes/Locale\")\nconst DataManager = require(\"../src/classes/DataManager\")\nconst EditorManager = require(\"../src/classes/EditorManager\")\nconst TemplateManager = require(\"../src/classes/TemplateManager\")\nconst ToolboxManager = require(\"../src/classes/ToolboxManager\")\nconst EventListenerManager = require(\"../src/classes/EventListenerManager\")\nconst PageManager = require(\"../src/classes/PageManager\")\nconst PopupManager = require(\"../src/classes/PopupManager\")\nconst ThemeManager = require(\"../src/classes/ThemeManager\")\nconst ToolBoxUI = require(\"../src/classes/ToolBoxUI\")\nconst ActionListComponent = require(\"../src/components/ActionListComponent\")\nconst MappingComponent = require(\"../src/components/MappingComponent\")\nrequire(\"../src/utils/defaults\")\n\n\nconst LocaleClass = Locale\n"],"names":[],"sourceRoot":""}